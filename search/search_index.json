{
    "docs": [
        {
            "location": "/", 
            "text": "Ngx-restangular\n\n\n\u7531\n2muchcoffee\n\u7ef4\u62a4.\n\n\n\u8fd9\u4e2a\u9879\u76ee\u662f\nRestangular\n\u7684\u540e\u7eed\u5de5\u4f5c.\nNgx-restangular\u662f\u4e00\u4e2aAngular 2+\u670d\u52a1\uff0c\u5b83\u4f7f\u7528\u6700\u5c11\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u7b80\u5316\u4e86\u5e38\u89c1\u7684GET\uff0cPOST\uff0cDELETE\u548cUPDATE\u8bf7\u6c42\u3002\n\u5b83\u975e\u5e38\u9002\u5408\u4efb\u4f55\u4f7f\u7528RESTful API\u6570\u636e\u7684WebApp\u3002", 
            "title": "\u9996\u9875"
        }, 
        {
            "location": "/#ngx-restangular", 
            "text": "\u7531 2muchcoffee \u7ef4\u62a4.  \u8fd9\u4e2a\u9879\u76ee\u662f Restangular \u7684\u540e\u7eed\u5de5\u4f5c.\nNgx-restangular\u662f\u4e00\u4e2aAngular 2+\u670d\u52a1\uff0c\u5b83\u4f7f\u7528\u6700\u5c11\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u7b80\u5316\u4e86\u5e38\u89c1\u7684GET\uff0cPOST\uff0cDELETE\u548cUPDATE\u8bf7\u6c42\u3002\n\u5b83\u975e\u5e38\u9002\u5408\u4efb\u4f55\u4f7f\u7528RESTful API\u6570\u636e\u7684WebApp\u3002", 
            "title": "Ngx-restangular"
        }, 
        {
            "location": "/starter-guide/", 
            "text": "\u76ee\u5f55\n\n\n\n\n\u61d2\u60f0\u7684\u8bfb\u8005\u7684\u5feb\u901f\u914d\u7f6e\n\n\n\u4f7f\u7528Restangular\n\n\n\u521b\u5efa\u4e3bRestangular\u5bf9\u8c61\n\n\n\u8ba9\u4ee3\u7801\u4e0eObservables!\n\n\n\u8fd9\u662f\u4f7f\u7528promises\u7684\u4ee3\u7801\u793a\u4f8b!\n\n\n\u914d\u7f6eRestangular\n\n\n\u5c5e\u6027\n\n\nwithConfig\n\n\nsetBaseUrl\n\n\nsetExtraFields\n\n\nsetParentless\n\n\naddElementTransformer\n\n\nsetTransformOnlyServerElements\n\n\nsetOnElemRestangularized\n\n\naddResponseInterceptor\n\n\naddFullRequestInterceptor\n\n\naddErrorInterceptor\n\n\nsetRestangularFields\n\n\nsetMethodOverriders\n\n\nsetDefaultRequestParams\n\n\nsetFullResponse\n\n\nsetDefaultHeaders\n\n\nsetRequestSuffix\n\n\nsetUseCannonicalId\n\n\nsetPlainByDefault\n\n\nsetEncodeIds\n\n\n\n\n\n\n\u8bbf\u95ee\u914d\u7f6e\n\n\n\u5982\u4f55\u5168\u5c40\u914d\u7f6e\u5b83\u4eec\n\n\n\u5728AppModule\u4e2d\u914d\u7f6e\n\n\n\u5728\u5e94\u7528\u4e86\u4f9d\u8d56\u6ce8\u5165\u7684AppModule\u4e2d\u8fdb\u884c\u914d\u7f6e\n\n\n\n\n\n\n\u5982\u4f55\u4f7f\u7528\u4e0e\u5168\u5c40\u670d\u52a1\u4e0d\u540c\u7684\u914d\u7f6e\u521b\u5efaRestangular\u670d\u52a1\n\n\n\u89e3\u8026\u7684Restangular\u670d\u52a1\n\n\n\u65b9\u6cd5\u8bf4\u660e\n\n\nRestangular \u65b9\u6cd5\n\n\n\u5143\u7d20\u65b9\u6cd5\n\n\n\u6536\u96c6\u65b9\u6cd5\n\n\n\u81ea\u5b9a\u4e49\u65b9\u6cd5\n\n\n\u590d\u5236\u5143\u7d20\n\n\n\u76f4\u63a5\u5728\u5177\u6709Observables\u7684\u6a21\u677f\u4e2d\u4f7f\u7528\u503c\n\n\nURL\u6784\u5efa\n\n\n\u521b\u5efa\u65b0\u7684Restangular\u65b9\u6cd5\n\n\n\u5c06\u81ea\u5b9a\u4e49\u65b9\u6cd5\u6dfb\u52a0\u5230\u96c6\u5408\n\n\n\u4f8b\n\n\n\u5411\u6a21\u578b\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65b9\u6cd5\n\n\n\u4f8b\n\n\nFAQ\n\n\n\u6211\u8be5\u5982\u4f55\u5904\u7406\u9519\u8bef?\n\n\n\u6211\u9700\u8981\u5728\u6bcf\u4e2aRestangular\u8bf7\u6c42\u4e2d\u53d1\u9001\u6388\u6743\u4ee4\u724c\uff0c\u6211\u8be5\u600e\u4e48\u505a?\n\n\n\u6211\u9700\u8981\u5728\u6bcf\u4e2aRestangular\u8bf7\u6c42\u4e2d\u53d1\u9001\u4e00\u4e2a\u6807\u5934\uff0c\u6211\u8be5\u600e\u4e48\u505a?\n\n\n\u5982\u4f55\u53d1\u9001\u6ca1\u6709\u6b63\u6587\u7684\u5220\u9664?\n\n\n\u6211\u4f7f\u7528Mongo\uff0c\u5143\u7d20\u7684ID\u662f_id\u800c\u4e0d\u662fid\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u672a\u5b9a\u4e49\u7684\u8def\u7531\n\n\n\u5982\u679c\u6211\u7684\u6bcf\u4e2a\u6a21\u578b\u90fd\u6709\u4e0d\u540c\u7684ID\u540d\u79f0\uff0c\u4f8b\u5982CustomerID for Customer\uff0c\u8be5\u600e\u4e48\u529e\uff1f\n\n\n\u5982\u4f55\u4f7f\u7528Restangular\u5728\u6211\u7684\u8bf7\u6c42\u4e2d\u53d1\u9001\u6587\u4ef6?\n\n\n\u5982\u4f55\u5904\u7406Restangular\u8fd4\u56de\u7684List\u4e2d\u7684CRUD\u64cd\u4f5c?\n\n\n\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u4fdd\u6301\u96c6\u5408\u7684\u91cd\u65b0\u7ec4\u5408\n\n\n\u5982\u4f55\u8bbf\u95eeunrestangularized\u5143\u7d20\u4ee5\u53carestangularized\u5143\u7d20?\n\n\n\u5982\u4f55\u5728\u8bf7\u6c42\u4e2d\u6dfb\u52a0withCredentials\u53c2\u6570?", 
            "title": "\u76ee\u5f55"
        }, 
        {
            "location": "/starter-guide/#_1", 
            "text": "\u61d2\u60f0\u7684\u8bfb\u8005\u7684\u5feb\u901f\u914d\u7f6e  \u4f7f\u7528Restangular  \u521b\u5efa\u4e3bRestangular\u5bf9\u8c61  \u8ba9\u4ee3\u7801\u4e0eObservables!  \u8fd9\u662f\u4f7f\u7528promises\u7684\u4ee3\u7801\u793a\u4f8b!  \u914d\u7f6eRestangular  \u5c5e\u6027  withConfig  setBaseUrl  setExtraFields  setParentless  addElementTransformer  setTransformOnlyServerElements  setOnElemRestangularized  addResponseInterceptor  addFullRequestInterceptor  addErrorInterceptor  setRestangularFields  setMethodOverriders  setDefaultRequestParams  setFullResponse  setDefaultHeaders  setRequestSuffix  setUseCannonicalId  setPlainByDefault  setEncodeIds    \u8bbf\u95ee\u914d\u7f6e  \u5982\u4f55\u5168\u5c40\u914d\u7f6e\u5b83\u4eec  \u5728AppModule\u4e2d\u914d\u7f6e  \u5728\u5e94\u7528\u4e86\u4f9d\u8d56\u6ce8\u5165\u7684AppModule\u4e2d\u8fdb\u884c\u914d\u7f6e    \u5982\u4f55\u4f7f\u7528\u4e0e\u5168\u5c40\u670d\u52a1\u4e0d\u540c\u7684\u914d\u7f6e\u521b\u5efaRestangular\u670d\u52a1  \u89e3\u8026\u7684Restangular\u670d\u52a1  \u65b9\u6cd5\u8bf4\u660e  Restangular \u65b9\u6cd5  \u5143\u7d20\u65b9\u6cd5  \u6536\u96c6\u65b9\u6cd5  \u81ea\u5b9a\u4e49\u65b9\u6cd5  \u590d\u5236\u5143\u7d20  \u76f4\u63a5\u5728\u5177\u6709Observables\u7684\u6a21\u677f\u4e2d\u4f7f\u7528\u503c  URL\u6784\u5efa  \u521b\u5efa\u65b0\u7684Restangular\u65b9\u6cd5  \u5c06\u81ea\u5b9a\u4e49\u65b9\u6cd5\u6dfb\u52a0\u5230\u96c6\u5408  \u4f8b  \u5411\u6a21\u578b\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65b9\u6cd5  \u4f8b  FAQ  \u6211\u8be5\u5982\u4f55\u5904\u7406\u9519\u8bef?  \u6211\u9700\u8981\u5728\u6bcf\u4e2aRestangular\u8bf7\u6c42\u4e2d\u53d1\u9001\u6388\u6743\u4ee4\u724c\uff0c\u6211\u8be5\u600e\u4e48\u505a?  \u6211\u9700\u8981\u5728\u6bcf\u4e2aRestangular\u8bf7\u6c42\u4e2d\u53d1\u9001\u4e00\u4e2a\u6807\u5934\uff0c\u6211\u8be5\u600e\u4e48\u505a?  \u5982\u4f55\u53d1\u9001\u6ca1\u6709\u6b63\u6587\u7684\u5220\u9664?  \u6211\u4f7f\u7528Mongo\uff0c\u5143\u7d20\u7684ID\u662f_id\u800c\u4e0d\u662fid\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u672a\u5b9a\u4e49\u7684\u8def\u7531  \u5982\u679c\u6211\u7684\u6bcf\u4e2a\u6a21\u578b\u90fd\u6709\u4e0d\u540c\u7684ID\u540d\u79f0\uff0c\u4f8b\u5982CustomerID for Customer\uff0c\u8be5\u600e\u4e48\u529e\uff1f  \u5982\u4f55\u4f7f\u7528Restangular\u5728\u6211\u7684\u8bf7\u6c42\u4e2d\u53d1\u9001\u6587\u4ef6?  \u5982\u4f55\u5904\u7406Restangular\u8fd4\u56de\u7684List\u4e2d\u7684CRUD\u64cd\u4f5c?  \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u4fdd\u6301\u96c6\u5408\u7684\u91cd\u65b0\u7ec4\u5408  \u5982\u4f55\u8bbf\u95eeunrestangularized\u5143\u7d20\u4ee5\u53carestangularized\u5143\u7d20?  \u5982\u4f55\u5728\u8bf7\u6c42\u4e2d\u6dfb\u52a0withCredentials\u53c2\u6570?", 
            "title": "\u76ee\u5f55"
        }, 
        {
            "location": "/starter-guide/quick-configuration/", 
            "text": "\u5feb\u901f\u914d\u7f6e\uff08\u9002\u7528\u4e8e\u61d2\u60f0\u8bfb\u8005\uff09\n\n\n\u8fd9\u5c31\u662f\u60a8\u5f00\u59cb\u4f7f\u7528\u6240\u6709\u57fa\u672cRestangular\u529f\u80fd\u6240\u9700\u7684\u5168\u90e8\u5185\u5bb9\u3002\n\n\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n./app.component\n;\n\n\nimport\n \n{\n \nRestangularModule\n,\n \nRestangular\n \n}\n \nfrom\n \nngx-restangular\n;\n\n\n\n// Function for setting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n)\n \n{\n\n  \nRestangularProvider\n.\nsetBaseUrl\n(\nhttp://api.restngx.local/v1\n);\n\n  \nRestangularProvider\n.\nsetDefaultHeaders\n({\nAuthorization\n:\n \nBearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1\n});\n\n\n}\n\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \n// Importing RestangularModule and making default configs for restanglar\n\n    \nRestangularModule\n.\nforRoot\n(\nRestangularConfigFactory\n),\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n\n\n}\n\n\n\n// later in code ...\n\n\n\n@\nComponent\n({\n\n  \n...\n\n\n})\n\n\nexport\n \nclass\n \nOtherComponent\n \n{\n\n  \nconstructor\n(\nprivate\n \nrestangular\n:\n \nRestangular\n)\n \n{\n\n  \n}\n\n\n  \nngOnInit\n()\n \n{\n\n    \n// GET http://api.test.local/v1/users/2/accounts\n\n    \nthis\n.\nrestangular\n.\none\n(\nusers\n,\n \n2\n).\nall\n(\naccounts\n).\ngetList\n();\n\n  \n}", 
            "title": "\u5feb\u901f\u4f7f\u7528"
        }, 
        {
            "location": "/starter-guide/quick-configuration/#_1", 
            "text": "\u8fd9\u5c31\u662f\u60a8\u5f00\u59cb\u4f7f\u7528\u6240\u6709\u57fa\u672cRestangular\u529f\u80fd\u6240\u9700\u7684\u5168\u90e8\u5185\u5bb9\u3002  import   {   NgModule   }   from   @angular/core ;  import   {   AppComponent   }   from   ./app.component ;  import   {   RestangularModule ,   Restangular   }   from   ngx-restangular ;  // Function for setting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider )   { \n   RestangularProvider . setBaseUrl ( http://api.restngx.local/v1 ); \n   RestangularProvider . setDefaultHeaders ({ Authorization :   Bearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1 });  }  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ \n     // Importing RestangularModule and making default configs for restanglar \n     RestangularModule . forRoot ( RestangularConfigFactory ), \n   ]  })  export   class   AppModule   {  }  // later in code ...  @ Component ({ \n   ...  })  export   class   OtherComponent   { \n   constructor ( private   restangular :   Restangular )   { \n   } \n\n   ngOnInit ()   { \n     // GET http://api.test.local/v1/users/2/accounts \n     this . restangular . one ( users ,   2 ). all ( accounts ). getList (); \n   }", 
            "title": "\u5feb\u901f\u914d\u7f6e\uff08\u9002\u7528\u4e8e\u61d2\u60f0\u8bfb\u8005\uff09"
        }, 
        {
            "location": "/starter-guide/using/", 
            "text": "\u4f7f\u7528Restangular\n\n\n\u521b\u5efa\u4e3bRestangular\u5bf9\u8c61\n\n\n\u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e3bRestangular\u5bf9\u8c61\u3002\n\u7b2c\u4e00\u4e2a\u4e5f\u662f\u6700\u5e38\u89c1\u7684\u4e00\u4e2a\u662f\u9648\u8ff0\u6240\u6709\u8bf7\u6c42\u7684\u4e3b\u8981\u8def\u5f84\u3002\n\u7b2c\u4e8c\u4e2a\u662f\u9648\u8ff0\u6240\u6709\u8bf7\u6c42\u7684\u4e3b\u8981\u8def\u5f84\u548c\u5bf9\u8c61\u3002\n\n\n// Only stating main route\n\n\nRestangular\n.\nall\n(\naccounts\n)\n\n\n\n// Stating main object\n\n\nRestangular\n.\none\n(\naccounts\n,\n \n1234\n)\n\n\n\n// Gets a list of all of those accounts\n\n\nRestangular\n.\nseveral\n(\naccounts\n,\n \n1234\n,\n \n123\n,\n \n12345\n);\n\n\n\n\n\n\u8ba9\u4ee3\u7801\u4e0eObservables\n\n\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e3b\u8981\u7684\u5bf9\u8c61\u8ba9\u6211\u4eec\u5f00\u59cb\u73a9\u5b83\u3002\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \n// Importing RestangularModule\n\n    \nRestangularModule\n,\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n\n\n}\n\n\n\n@\nComponent\n({\n\n  \n...\n\n\n})\n\n\nexport\n \nclass\n \nOtherComponent\n \n{\n\n  \nallAccounts\n;\n\n  \naccounts\n;\n\n  \naccount\n;\n\n\n  \nconstructor\n(\nprivate\n \nrestangular\n:\n \nRestangular\n)\n \n{\n\n  \n}\n\n\n  \nngOnInit\n()\n \n{\n\n    \n// First way of creating a this.restangular object. Just saying the base URL\n\n    \nlet\n \nbaseAccounts\n \n=\n \nthis\n.\nrestangular\n.\nall\n(\naccounts\n);\n\n\n    \n// This will query /accounts and return a observable.\n\n    \nbaseAccounts\n.\ngetList\n().\nsubscribe\n(\naccounts\n \n=\n \n{\n\n      \nthis\n.\nallAccounts\n \n=\n \naccounts\n;\n\n    \n});\n\n\n\n    \nlet\n \nnewAccount\n \n=\n \n{\nname\n:\n \nGonto\ns account\n};\n\n\n    \n// POST /accounts\n\n    \nbaseAccounts\n.\npost\n(\nnewAccount\n);\n\n\n    \n// GET to http://www.google.com/ You set the URL in this case\n\n    \nthis\n.\nrestangular\n.\nallUrl\n(\ngooglers\n,\n \nhttp://www.google.com/\n).\ngetList\n();\n\n\n    \n// GET to http://www.google.com/1 You set the URL in this case\n\n    \nthis\n.\nrestangular\n.\noneUrl\n(\ngooglers\n,\n \nhttp://www.google.com/1\n).\nget\n();\n\n\n    \n// You can do RequestLess \nconnections\n if you need as well\n\n\n    \n// Just ONE GET to /accounts/123/buildings/456\n\n    \nthis\n.\nrestangular\n.\none\n(\naccounts\n,\n \n123\n).\none\n(\nbuildings\n,\n \n456\n).\nget\n();\n\n\n    \n// Just ONE GET to /accounts/123/buildings\n\n    \nthis\n.\nrestangular\n.\none\n(\naccounts\n,\n \n123\n).\ngetList\n(\nbuildings\n);\n\n\n    \n// Here we use Observables\n\n    \n// GET /accounts\n\n    \nlet\n \nbaseAccounts$\n \n=\n \nbaseAccounts\n.\ngetList\n().\nsubscribe\n(\naccounts\n \n=\n \n{\n\n      \n// Here we can continue fetching the tree :).\n\n\n      \nlet\n \nfirstAccount\n \n=\n \naccounts\n[\n0\n];\n\n      \n// This will query /accounts/123/buildings considering 123 is the id of the firstAccount\n\n      \nlet\n \nbuildings\n \n=\n \nfirstAccount\n.\ngetList\n(\nbuildings\n);\n\n\n      \n// GET /accounts/123/places?query=param with request header: x-user:mgonto\n\n      \nlet\n \nloggedInPlaces\n \n=\n \nfirstAccount\n.\ngetList\n(\nplaces\n,\n \n{\nquery\n:\n \nparam\n},\n \n{\nx-user\n:\n \nmgonto\n});\n\n\n      \n// This is a regular JS object, we can change anything we want :)\n\n      \nfirstAccount\n.\nname\n \n=\n \nGonto\n;\n\n\n      \n// If we wanted to keep the original as it is, we can copy it to a new element\n\n      \nlet\n \neditFirstAccount\n \n=\n \nthis\n.\nrestangular\n.\ncopy\n(\nfirstAccount\n);\n\n      \neditFirstAccount\n.\nname\n \n=\n \nNew Name\n;\n\n\n\n      \n// PUT /accounts/123. The name of this account will be changed from now on\n\n      \nfirstAccount\n.\nput\n();\n\n      \neditFirstAccount\n.\nput\n();\n\n\n      \n// PUT /accounts/123. Save will do POST or PUT accordingly\n\n      \nfirstAccount\n.\nsave\n();\n\n\n      \n// DELETE /accounts/123 We don\nt have first account anymore :(\n\n      \nfirstAccount\n.\nremove\n();\n\n\n    \n},\n \n()\n \n=\n \n{\n\n      \nalert\n(\nOops error from server :(\n);\n\n    \n});\n\n\n\n    \n// Get first account\n\n    \nlet\n \nfirstAccount$\n \n=\n \nbaseAccounts$\n.\nmap\n(\naccounts\n \n=\n \naccounts\n[\n0\n]);\n\n\n\n    \n// POST /accounts/123/buildings with MyBuilding information\n\n    \nfirstAccount$\n.\nswitchMap\n(\nfirstAccount\n \n=\n \n{\n\n      \nvar\n \nmyBuilding\n \n=\n \n{\n\n        \nname\n:\n \nGonto\ns Building\n,\n\n        \nplace\n:\n \nArgentina\n\n      \n};\n\n\n      \nreturn\n \nfirstAccount\n.\npost\n(\nBuildings\n,\n \nmyBuilding\n)\n\n    \n})\n\n    \n.\nsubscribe\n(()\n \n=\n \n{\n\n      \nconsole\n.\nlog\n(\nObject saved OK\n);\n\n    \n},\n \n()\n \n=\n \n{\n\n      \nconsole\n.\nlog\n(\nThere was an error saving\n);\n\n    \n});\n\n\n\n    \n// GET /accounts/123/users?query=params\n\n    \nfirstAccount$\n.\nswitchMap\n(\nfirstAccount\n \n=\n \n{\n\n      \nvar\n \nmyBuilding\n \n=\n \n{\n\n        \nname\n:\n \nGonto\ns Building\n,\n\n        \nplace\n:\n \nArgentina\n\n      \n};\n\n\n      \nreturn\n \nfirstAccount\n.\ngetList\n(\nusers\n,\n \n{\nquery\n:\n \nparams\n});\n\n    \n})\n\n    \n.\nsubscribe\n((\nusers\n)\n \n=\n \n{\n\n      \n// Instead of posting nested element, a collection can post to itself\n\n      \n// POST /accounts/123/users\n\n      \nusers\n.\npost\n({\nuserName\n:\n \nunknown\n});\n\n\n      \n// Custom methods are available now :).\n\n      \n// GET /accounts/123/users/messages?param=myParam\n\n      \nusers\n.\ncustomGET\n(\nmessages\n,\n \n{\nparam\n:\n \nmyParam\n});\n\n\n      \nvar\n \nfirstUser\n \n=\n \nusers\n[\n0\n];\n\n\n      \n// GET /accounts/123/users/456. Just in case we want to update one user :)\n\n      \nlet\n \nuserFromServer\n \n=\n \nfirstUser\n.\nget\n();\n\n\n      \n// ALL http methods are available :)\n\n      \n// HEAD /accounts/123/users/456\n\n      \nfirstUser\n.\nhead\n()\n\n    \n},\n \n()\n \n=\n \n{\n\n      \nconsole\n.\nlog\n(\nThere was an error saving\n);\n\n    \n});\n\n\n\n    \n// Second way of creating this.restangular object. URL and ID :)\n\n    \nvar\n \naccount\n \n=\n \nthis\n.\nrestangular\n.\none\n(\naccounts\n,\n \n123\n);\n\n\n    \n// GET /accounts/123?single=true\n\n    \nthis\n.\naccount\n \n=\n \naccount\n.\nget\n({\nsingle\n:\n \ntrue\n});\n\n\n    \n// POST /accounts/123/messages?param=myParam with the body of name: \nMy Message\n\n    \naccount\n.\ncustomPOST\n({\nname\n:\n \nMy Message\n},\n \nmessages\n,\n \n{\nparam\n:\n \nmyParam\n},\n \n{})\n\n  \n}\n\n\n}\n\n\n\n\n\n\u8fd9\u662f\u4f7f\u7528promises\u7684\u4ee3\u7801\u793a\u4f8b\n\n\n@\nComponent\n({\n\n  \n...\n\n\n})\n\n\nexport\n \nclass\n \nOtherComponent\n \n{\n\n  \nallAccounts\n;\n\n  \naccounts\n;\n\n  \naccount\n;\n\n\n  \nconstructor\n(\nprivate\n \nrestangular\n:\n \nRestangular\n)\n \n{\n\n  \n}\n\n\n  \nngOnInit\n()\n \n{\n\n\n    \n// First way of creating a this.restangular object. Just saying the base URL\n\n    \nlet\n \nbaseAccounts\n \n=\n \nthis\n.\nrestangular\n.\nall\n(\naccounts\n);\n\n\n    \n// This will query /accounts and return a promise.\n\n    \nbaseAccounts\n.\ngetList\n().\ntoPromise\n().\nthen\n(\nfunction\n(\naccounts\n)\n \n{\n\n      \nthis\n.\nallAccounts\n \n=\n \naccounts\n;\n\n    \n});\n\n\n    \nvar\n \nnewAccount\n \n=\n \n{\nname\n:\n \nGonto\ns account\n};\n\n\n    \n// POST /accounts\n\n    \nbaseAccounts\n.\npost\n(\nnewAccount\n);\n\n\n    \n// GET to http://www.google.com/ You set the URL in this case\n\n    \nthis\n.\nrestangular\n.\nallUrl\n(\ngooglers\n,\n \nhttp://www.google.com/\n).\ngetList\n();\n\n\n    \n// GET to http://www.google.com/1 You set the URL in this case\n\n    \nthis\n.\nrestangular\n.\noneUrl\n(\ngooglers\n,\n \nhttp://www.google.com/1\n).\nget\n();\n\n\n    \n// You can do RequestLess \nconnections\n if you need as well\n\n\n    \n// Just ONE GET to /accounts/123/buildings/456\n\n    \nthis\n.\nrestangular\n.\none\n(\naccounts\n,\n \n123\n).\none\n(\nbuildings\n,\n \n456\n).\nget\n();\n\n\n    \n// Just ONE GET to /accounts/123/buildings\n\n    \nthis\n.\nrestangular\n.\none\n(\naccounts\n,\n \n123\n).\ngetList\n(\nbuildings\n);\n\n\n    \n// Here we use Promises then\n\n    \n// GET /accounts\n\n    \nbaseAccounts\n.\ngetList\n().\ntoPromise\n().\nthen\n(\nfunction\n \n(\naccounts\n)\n \n{\n\n      \n// Here we can continue fetching the tree :).\n\n\n      \nvar\n \nfirstAccount\n \n=\n \naccounts\n[\n0\n];\n\n      \n// This will query /accounts/123/buildings considering 123 is the id of the firstAccount\n\n      \nthis\n.\nbuildings\n \n=\n \nfirstAccount\n.\ngetList\n(\nbuildings\n);\n\n\n      \n// GET /accounts/123/places?query=param with request header: x-user:mgonto\n\n      \nthis\n.\nloggedInPlaces\n \n=\n \nfirstAccount\n.\ngetList\n(\nplaces\n,\n \n{\nquery\n:\n \nparam\n},\n \n{\nx-user\n:\n \nmgonto\n});\n\n\n      \n// This is a regular JS object, we can change anything we want :)\n\n      \nfirstAccount\n.\nname\n \n=\n \nGonto\n;\n\n\n      \n// If we wanted to keep the original as it is, we can copy it to a new element\n\n      \nvar\n \neditFirstAccount\n \n=\n \nthis\n.\nrestangular\n.\ncopy\n(\nfirstAccount\n);\n\n      \neditFirstAccount\n.\nname\n \n=\n \nNew Name\n;\n\n\n\n      \n// PUT /accounts/123. The name of this account will be changed from now on\n\n      \nfirstAccount\n.\nput\n();\n\n      \neditFirstAccount\n.\nput\n();\n\n\n      \n// PUT /accounts/123. Save will do POST or PUT accordingly\n\n      \nfirstAccount\n.\nsave\n();\n\n\n      \n// DELETE /accounts/123 We don\nt have first account anymore :(\n\n      \nfirstAccount\n.\nremove\n();\n\n\n      \nvar\n \nmyBuilding\n \n=\n \n{\n\n        \nname\n:\n \nGonto\ns Building\n,\n\n        \nplace\n:\n \nArgentina\n\n      \n};\n\n\n      \n// POST /accounts/123/buildings with MyBuilding information\n\n      \nfirstAccount\n.\npost\n(\nBuildings\n,\n \nmyBuilding\n).\ntoPromise\n().\nthen\n(\nfunction\n()\n \n{\n\n        \nconsole\n.\nlog\n(\nObject saved OK\n);\n\n      \n},\n \nfunction\n()\n \n{\n\n        \nconsole\n.\nlog\n(\nThere was an error saving\n);\n\n      \n});\n\n\n      \n// GET /accounts/123/users?query=params\n\n      \nfirstAccount\n.\ngetList\n(\nusers\n,\n \n{\nquery\n:\n \nparams\n}).\ntoPromise\n().\nthen\n(\nfunction\n(\nusers\n)\n \n{\n\n        \n// Instead of posting nested element, a collection can post to itself\n\n        \n// POST /accounts/123/users\n\n        \nusers\n.\npost\n({\nuserName\n:\n \nunknown\n});\n\n\n        \n// Custom methods are available now :).\n\n        \n// GET /accounts/123/users/messages?param=myParam\n\n        \nusers\n.\ncustomGET\n(\nmessages\n,\n \n{\nparam\n:\n \nmyParam\n});\n\n\n        \nvar\n \nfirstUser\n \n=\n \nusers\n[\n0\n];\n\n\n        \n// GET /accounts/123/users/456. Just in case we want to update one user :)\n\n        \nthis\n.\nuserFromServer\n \n=\n \nfirstUser\n.\nget\n();\n\n\n        \n// ALL http methods are available :)\n\n        \n// HEAD /accounts/123/users/456\n\n        \nfirstUser\n.\nhead\n()\n\n\n      \n});\n\n\n    \n},\n \nfunction\n \nerrorCallback\n()\n \n{\n\n      \nalert\n(\nOops error from server :(\n);\n\n    \n});\n\n\n    \n// Second way of creating this.restangular object. URL and ID :)\n\n    \nvar\n \naccount\n \n=\n \nthis\n.\nrestangular\n.\none\n(\naccounts\n,\n \n123\n);\n\n\n    \n// GET /accounts/123?single=true\n\n    \nthis\n.\naccount\n \n=\n \naccount\n.\nget\n({\nsingle\n:\n \ntrue\n});\n\n\n    \n// POST /accounts/123/messages?param=myParam with the body of name: \nMy Message\n\n    \naccount\n.\ncustomPOST\n({\nname\n:\n \nMy Message\n},\n \nmessages\n,\n \n{\nparam\n:\n \nmyParam\n},\n \n{})\n\n  \n}\n\n\n}", 
            "title": "\u4f7f\u7528"
        }, 
        {
            "location": "/starter-guide/using/#restangular", 
            "text": "", 
            "title": "\u4f7f\u7528Restangular"
        }, 
        {
            "location": "/starter-guide/using/#restangular_1", 
            "text": "\u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e3bRestangular\u5bf9\u8c61\u3002\n\u7b2c\u4e00\u4e2a\u4e5f\u662f\u6700\u5e38\u89c1\u7684\u4e00\u4e2a\u662f\u9648\u8ff0\u6240\u6709\u8bf7\u6c42\u7684\u4e3b\u8981\u8def\u5f84\u3002\n\u7b2c\u4e8c\u4e2a\u662f\u9648\u8ff0\u6240\u6709\u8bf7\u6c42\u7684\u4e3b\u8981\u8def\u5f84\u548c\u5bf9\u8c61\u3002  // Only stating main route  Restangular . all ( accounts )  // Stating main object  Restangular . one ( accounts ,   1234 )  // Gets a list of all of those accounts  Restangular . several ( accounts ,   1234 ,   123 ,   12345 );", 
            "title": "\u521b\u5efa\u4e3bRestangular\u5bf9\u8c61"
        }, 
        {
            "location": "/starter-guide/using/#observables", 
            "text": "\u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e3b\u8981\u7684\u5bf9\u8c61\u8ba9\u6211\u4eec\u5f00\u59cb\u73a9\u5b83\u3002  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ \n     // Importing RestangularModule \n     RestangularModule , \n   ]  })  export   class   AppModule   {  }  @ Component ({ \n   ...  })  export   class   OtherComponent   { \n   allAccounts ; \n   accounts ; \n   account ; \n\n   constructor ( private   restangular :   Restangular )   { \n   } \n\n   ngOnInit ()   { \n     // First way of creating a this.restangular object. Just saying the base URL \n     let   baseAccounts   =   this . restangular . all ( accounts ); \n\n     // This will query /accounts and return a observable. \n     baseAccounts . getList (). subscribe ( accounts   =   { \n       this . allAccounts   =   accounts ; \n     }); \n\n\n     let   newAccount   =   { name :   Gonto s account }; \n\n     // POST /accounts \n     baseAccounts . post ( newAccount ); \n\n     // GET to http://www.google.com/ You set the URL in this case \n     this . restangular . allUrl ( googlers ,   http://www.google.com/ ). getList (); \n\n     // GET to http://www.google.com/1 You set the URL in this case \n     this . restangular . oneUrl ( googlers ,   http://www.google.com/1 ). get (); \n\n     // You can do RequestLess  connections  if you need as well \n\n     // Just ONE GET to /accounts/123/buildings/456 \n     this . restangular . one ( accounts ,   123 ). one ( buildings ,   456 ). get (); \n\n     // Just ONE GET to /accounts/123/buildings \n     this . restangular . one ( accounts ,   123 ). getList ( buildings ); \n\n     // Here we use Observables \n     // GET /accounts \n     let   baseAccounts$   =   baseAccounts . getList (). subscribe ( accounts   =   { \n       // Here we can continue fetching the tree :). \n\n       let   firstAccount   =   accounts [ 0 ]; \n       // This will query /accounts/123/buildings considering 123 is the id of the firstAccount \n       let   buildings   =   firstAccount . getList ( buildings ); \n\n       // GET /accounts/123/places?query=param with request header: x-user:mgonto \n       let   loggedInPlaces   =   firstAccount . getList ( places ,   { query :   param },   { x-user :   mgonto }); \n\n       // This is a regular JS object, we can change anything we want :) \n       firstAccount . name   =   Gonto ; \n\n       // If we wanted to keep the original as it is, we can copy it to a new element \n       let   editFirstAccount   =   this . restangular . copy ( firstAccount ); \n       editFirstAccount . name   =   New Name ; \n\n\n       // PUT /accounts/123. The name of this account will be changed from now on \n       firstAccount . put (); \n       editFirstAccount . put (); \n\n       // PUT /accounts/123. Save will do POST or PUT accordingly \n       firstAccount . save (); \n\n       // DELETE /accounts/123 We don t have first account anymore :( \n       firstAccount . remove (); \n\n     },   ()   =   { \n       alert ( Oops error from server :( ); \n     }); \n\n\n     // Get first account \n     let   firstAccount$   =   baseAccounts$ . map ( accounts   =   accounts [ 0 ]); \n\n\n     // POST /accounts/123/buildings with MyBuilding information \n     firstAccount$ . switchMap ( firstAccount   =   { \n       var   myBuilding   =   { \n         name :   Gonto s Building , \n         place :   Argentina \n       }; \n\n       return   firstAccount . post ( Buildings ,   myBuilding ) \n     }) \n     . subscribe (()   =   { \n       console . log ( Object saved OK ); \n     },   ()   =   { \n       console . log ( There was an error saving ); \n     }); \n\n\n     // GET /accounts/123/users?query=params \n     firstAccount$ . switchMap ( firstAccount   =   { \n       var   myBuilding   =   { \n         name :   Gonto s Building , \n         place :   Argentina \n       }; \n\n       return   firstAccount . getList ( users ,   { query :   params }); \n     }) \n     . subscribe (( users )   =   { \n       // Instead of posting nested element, a collection can post to itself \n       // POST /accounts/123/users \n       users . post ({ userName :   unknown }); \n\n       // Custom methods are available now :). \n       // GET /accounts/123/users/messages?param=myParam \n       users . customGET ( messages ,   { param :   myParam }); \n\n       var   firstUser   =   users [ 0 ]; \n\n       // GET /accounts/123/users/456. Just in case we want to update one user :) \n       let   userFromServer   =   firstUser . get (); \n\n       // ALL http methods are available :) \n       // HEAD /accounts/123/users/456 \n       firstUser . head () \n     },   ()   =   { \n       console . log ( There was an error saving ); \n     }); \n\n\n     // Second way of creating this.restangular object. URL and ID :) \n     var   account   =   this . restangular . one ( accounts ,   123 ); \n\n     // GET /accounts/123?single=true \n     this . account   =   account . get ({ single :   true }); \n\n     // POST /accounts/123/messages?param=myParam with the body of name:  My Message \n     account . customPOST ({ name :   My Message },   messages ,   { param :   myParam },   {}) \n   }  }", 
            "title": "\u8ba9\u4ee3\u7801\u4e0eObservables"
        }, 
        {
            "location": "/starter-guide/using/#promises", 
            "text": "@ Component ({ \n   ...  })  export   class   OtherComponent   { \n   allAccounts ; \n   accounts ; \n   account ; \n\n   constructor ( private   restangular :   Restangular )   { \n   } \n\n   ngOnInit ()   { \n\n     // First way of creating a this.restangular object. Just saying the base URL \n     let   baseAccounts   =   this . restangular . all ( accounts ); \n\n     // This will query /accounts and return a promise. \n     baseAccounts . getList (). toPromise (). then ( function ( accounts )   { \n       this . allAccounts   =   accounts ; \n     }); \n\n     var   newAccount   =   { name :   Gonto s account }; \n\n     // POST /accounts \n     baseAccounts . post ( newAccount ); \n\n     // GET to http://www.google.com/ You set the URL in this case \n     this . restangular . allUrl ( googlers ,   http://www.google.com/ ). getList (); \n\n     // GET to http://www.google.com/1 You set the URL in this case \n     this . restangular . oneUrl ( googlers ,   http://www.google.com/1 ). get (); \n\n     // You can do RequestLess  connections  if you need as well \n\n     // Just ONE GET to /accounts/123/buildings/456 \n     this . restangular . one ( accounts ,   123 ). one ( buildings ,   456 ). get (); \n\n     // Just ONE GET to /accounts/123/buildings \n     this . restangular . one ( accounts ,   123 ). getList ( buildings ); \n\n     // Here we use Promises then \n     // GET /accounts \n     baseAccounts . getList (). toPromise (). then ( function   ( accounts )   { \n       // Here we can continue fetching the tree :). \n\n       var   firstAccount   =   accounts [ 0 ]; \n       // This will query /accounts/123/buildings considering 123 is the id of the firstAccount \n       this . buildings   =   firstAccount . getList ( buildings ); \n\n       // GET /accounts/123/places?query=param with request header: x-user:mgonto \n       this . loggedInPlaces   =   firstAccount . getList ( places ,   { query :   param },   { x-user :   mgonto }); \n\n       // This is a regular JS object, we can change anything we want :) \n       firstAccount . name   =   Gonto ; \n\n       // If we wanted to keep the original as it is, we can copy it to a new element \n       var   editFirstAccount   =   this . restangular . copy ( firstAccount ); \n       editFirstAccount . name   =   New Name ; \n\n\n       // PUT /accounts/123. The name of this account will be changed from now on \n       firstAccount . put (); \n       editFirstAccount . put (); \n\n       // PUT /accounts/123. Save will do POST or PUT accordingly \n       firstAccount . save (); \n\n       // DELETE /accounts/123 We don t have first account anymore :( \n       firstAccount . remove (); \n\n       var   myBuilding   =   { \n         name :   Gonto s Building , \n         place :   Argentina \n       }; \n\n       // POST /accounts/123/buildings with MyBuilding information \n       firstAccount . post ( Buildings ,   myBuilding ). toPromise (). then ( function ()   { \n         console . log ( Object saved OK ); \n       },   function ()   { \n         console . log ( There was an error saving ); \n       }); \n\n       // GET /accounts/123/users?query=params \n       firstAccount . getList ( users ,   { query :   params }). toPromise (). then ( function ( users )   { \n         // Instead of posting nested element, a collection can post to itself \n         // POST /accounts/123/users \n         users . post ({ userName :   unknown }); \n\n         // Custom methods are available now :). \n         // GET /accounts/123/users/messages?param=myParam \n         users . customGET ( messages ,   { param :   myParam }); \n\n         var   firstUser   =   users [ 0 ]; \n\n         // GET /accounts/123/users/456. Just in case we want to update one user :) \n         this . userFromServer   =   firstUser . get (); \n\n         // ALL http methods are available :) \n         // HEAD /accounts/123/users/456 \n         firstUser . head () \n\n       }); \n\n     },   function   errorCallback ()   { \n       alert ( Oops error from server :( ); \n     }); \n\n     // Second way of creating this.restangular object. URL and ID :) \n     var   account   =   this . restangular . one ( accounts ,   123 ); \n\n     // GET /accounts/123?single=true \n     this . account   =   account . get ({ single :   true }); \n\n     // POST /accounts/123/messages?param=myParam with the body of name:  My Message \n     account . customPOST ({ name :   My Message },   messages ,   { param :   myParam },   {}) \n   }  }", 
            "title": "\u8fd9\u662f\u4f7f\u7528promises\u7684\u4ee3\u7801\u793a\u4f8b"
        }, 
        {
            "location": "/starter-guide/configuring/", 
            "text": "\u914d\u7f6eRestangular\n\n\n\u5c5e\u6027\n\n\nRestangular comes with defaults for all of its properties but you can configure them. \nSo, if you don't need to configure something, there's no need to add the configuration.\n\nYou can set all these configurations in \nRestangularModule\n to change the global configuration\n, you can also \nuse the \nwithConfig\n method in Restangular service to create a new Restangular service with some scoped configuration\n or \nuse \nwithConfig\n in component to make specified Restangular\n\n\nwithConfig\n\n\nYou can configure Restangular \"withConfig\" like in example below, you can also configure them globally \nRestangularModule\n or in service with \nwithConfig\n\n\n// Function for settting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n)\n \n{\n\n  \nRestangularProvider\n.\nsetBaseUrl\n(\nhttp://www.google.com\n);\n\n\n}\n\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \n// Global configuration\n\n    \nRestangularModule\n.\nforRoot\n(\nRestangularConfigFactory\n),\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n// Let\ns use it in the component\n\n\n@\nComponent\n({\n\n  \n...\n\n\n})\n\n\nexport\n \nclass\n \nOtherComponent\n \n{\n\n  \nconstructor\n(\nprivate\n \nrestangular\n:\n \nRestangular\n)\n \n{}\n\n\n  \nngOnInit\n()\n \n{\n\n    \nrestangular\n.\nwithConfig\n((\nRestangularConfigurer\n)\n \n=\n \n{\n\n      \nRestangularConfigurer\n.\nsetBaseUrl\n(\nhttp://www.bing.com\n);\n\n    \n}).\nall\n(\nusers\n).\ngetList\n()\n\n  \n}\n\n\n};\n\n\n\n\n\nsetBaseUrl\n\n\nThe base URL for all calls to your API. For example if your URL for fetching accounts is http://example.com/api/v1/accounts, then your baseUrl is \n/api/v1\n. The default baseUrl is an empty string which resolves to the same url that Angular2 is running, but you can also set an absolute url like \nhttp://api.example.com/api/v1\n if you need to set another domain.\n\n\nsetExtraFields\n\n\nThese are the fields that you want to save from your parent resources if you need to display them. By default this is an Empty Array which will suit most cases\n\n\nsetParentless\n\n\nUse this property to control whether Restangularized elements to have a parent or not. So, for example if you get an account and then get a nested list of buildings, you may want the buildings URL to be simple \n/buildings/123\n instead of \n/accounts/123/buildings/123\n. This property lets you do that.\n\n\nThis method accepts 1 parameter, it could be:\n\n\n\n\nBoolean: Specifies if all elements should be parentless or not\n\n\nArray: Specifies the routes (types) of all elements that should be parentless. For example \n['buildings']\n\n\n\n\naddElementTransformer\n\n\nThis is a hook. After each element has been \"restangularized\" (Added the new methods from Restangular), the corresponding transformer will be called if it fits.\n\n\nThis should be used to add your own methods / functions to entities of certain types.\n\n\nYou can add as many element transformers as you want. The signature of this method can be one of the following:\n\n\n\n\n\n\naddElementTransformer(route, transformer)\n: Transformer is called with all elements that have been restangularized, no matter if they're collections or not.\n\n\n\n\n\n\naddElementTransformer(route, isCollection, transformer)\n: Transformer is called with all elements that have been restangularized and match the specification regarding if it's a collection or not (true | false)\n\n\n\n\n\n\nsetTransformOnlyServerElements\n\n\nThis sets whether transformers will be run for local objects and not by objects returned by the server. This is by default true but can be changed to false if needed (Most people won't need this).\n\n\nsetOnElemRestangularized\n\n\nThis is a hook. After each element has been \"restangularized\" (Added the new methods from Restangular), this will be called. It means that if you receive a list of objects in one call, this method will be called first for the collection and then for each element of the collection.\n\n\nI favor the usage of \naddElementTransformer\n instead of \nonElemRestangularized\n whenever possible as the implementation is much cleaner.\n\n\nThis callback is a function that has 4 parameters:\n\n\n\n\nelem\n: The element that has just been restangularized. Can be a collection or a single element.\n\n\nisCollection\n: Boolean indicating if this is a collection or a single element.\n\n\nwhat\n: The model that is being modified. This is the \"path\" of this resource. For example \nbuildings\n\n\nRestangular\n: The instanced service to use any of its methods\n\n\n\n\nThis can be used together with \naddRestangularMethod\n (Explained later) to add custom methods to an element\n\n\nservice\n.\nsetOnElemRestangularized\n((\nelement\n,\n \nisCollection\n,\n \nwhat\n,\n \nRestangular\n)\n \n=\n \n{\n\n  \nelement\n.\nnewField\n \n=\n \nnewField\n;\n\n  \nreturn\n \nelement\n;\n\n\n});\n\n\n\n\n\naddResponseInterceptor\n\n\nThe responseInterceptor is called after we get each response from the server. It's a function that receives this arguments:\n\n\n\n\ndata\n: The data received got from the server\n\n\noperation\n: The operation made. It'll be the HTTP method used except for a \nGET\n which returns a list of element which will return \ngetList\n so that you can distinguish them.\n\n\nwhat\n: The model that's being requested. It can be for example: \naccounts\n, \nbuildings\n, etc.\n\n\nurl\n: The relative URL being requested. For example: \n/api/v1/accounts/123\n\n\nresponse\n: Full server response including headers\n\n\n\n\nSome of the use cases of the responseInterceptor are handling wrapped responses and enhancing response elements with more methods among others.\n\n\nThe responseInterceptor must return the restangularized data element.\n\n\n \nRestangularProvider\n.\naddResponseInterceptor\n((\ndata\n,\n \noperation\n,\n \nwhat\n,\n \nurl\n,\n \nresponse\n)=\n \n{\n\n       \nreturn\n \ndata\n;\n\n     \n});\n\n \n});\n\n\n\n\n\naddFullRequestInterceptor\n\n\nThis adds a new fullRequestInterceptor. The fullRequestInterceptor is similar to the \nrequestInterceptor\n but more powerful. It lets you change the element, the request parameters and the headers as well.\n\n\nIt's a function that receives the same as the \nrequestInterceptor\n plus the headers and the query parameters (in that order).\n\n\nIt can return an object with any (or all) of following properties:\n\n\n\n\nheaders\n: The headers to send\n\n\nparams\n: The request parameters to send\n\n\nelement\n: The element to send\n\n\n\n\nRestangularProvider\n.\naddFullRequestInterceptor\n((\nelement\n,\n \noperation\n,\n \npath\n,\n \nurl\n,\n \nheaders\n,\n \nparams\n)=\n \n{\n\n   \nreturn\n \n{\n\n     \nparams\n:\n \nObject\n.\nassign\n({},\n \nparams\n,\n \n{\nsort\n:\nname\n}),\n\n     \nheaders\n:\n \nheaders\n,\n\n     \nelement\n:\n \nelement\n\n   \n}\n\n \n});\n\n\n\n\n\nIf a property isn't returned, the one sent is used.\n\n\naddErrorInterceptor\n\n\nThe errorInterceptor is called whenever there's an error. It's a function that receives the response, subject and the Restangular-response handler as parameters.\n\n\nThe errorInterceptor function, whenever it returns false, prevents the observable linked to a Restangular request to be executed. All other return values (besides false) are ignored and the observable follows the usual path, eventually reaching the success or error hooks.\n\n\nThe refreshAccesstoken function must return observable. It`s function that will be done before repeating the request, there you can make some actions. In switchMap you might do some transformations to request.\n\n\n// Function for settting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n,\n \nauthService\n)\n \n{\n\n  \nRestangularProvider\n.\nsetBaseUrl\n(\nhttp://api.test.com/v1\n);\n\n\n  \n// This function must return observable\n\n  \nvar\n \nrefreshAccesstoken\n \n=\n \nfunction\n \n()\n \n{\n\n    \n// Here you can make action before repeated request\n\n    \nreturn\n \nauthService\n.\nfunctionForTokenUpdate\n();\n\n  \n};\n\n\n  \nRestangularProvider\n.\naddErrorInterceptor\n((\nresponse\n,\n \nsubject\n,\n \nresponseHandler\n)\n \n=\n \n{\n\n    \nif\n \n(\nresponse\n.\nstatus\n \n===\n \n403\n)\n \n{\n\n\n      \nrefreshAccesstoken\n()\n\n      \n.\nswitchMap\n(\nrefreshAccesstokenResponse\n \n=\n \n{\n\n        \n//If you want to change request or make with it some actions and give the request to the repeatRequest func.\n\n        \n//Or you can live it empty and request will be the same.\n\n\n        \n// update Authorization header\n\n        \nresponse\n.\nrequest\n.\nheaders\n.\nset\n(\nAuthorization\n,\n \nBearer \n \n+\n \nrefreshAccesstokenResponse\n)\n\n\n        \nreturn\n \nresponse\n.\nrepeatRequest\n(\nresponse\n.\nrequest\n);\n\n      \n})\n\n      \n.\nsubscribe\n(\n\n        \nres\n \n=\n \nresponseHandler\n(\nres\n),\n\n        \nerr\n \n=\n \nsubject\n.\nerror\n(\nerr\n)\n\n      \n);\n\n\n      \nreturn\n \nfalse\n;\n \n// error handled\n\n    \n}\n\n    \nreturn\n \ntrue\n;\n \n// error not handled\n\n  \n});\n\n\n}\n\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \nimports\n:\n \n[\n\n    \n// Importing RestangularModule and making default configs for restanglar\n\n    \nRestangularModule\n.\nforRoot\n([\nauthService\n],\n \nRestangularConfigFactory\n),\n\n  \n],\n\n\n})\n\n\n\n\n\nsetRestangularFields\n\n\nRestangular required 3 fields for every \"Restangularized\" element. These are:\n\n\n\n\nid: Id of the element. Default: id\n\n\nroute: Name of the route of this element. Default: route\n\n\nparentResource: The reference to the parent resource. Default: parentResource\n\n\nrestangularCollection: A boolean indicating if this is a collection or an element. Default: restangularCollection\n\n\ncannonicalId: If available, the path to the cannonical ID to use. Useful for PK changes\n\n\netag: Where to save the ETag received from the server. Defaults to \nrestangularEtag\n\n\nselfLink: The path to the property that has the URL to this item. If your REST API doesn't return a URL to an item, you can just leave it blank. Defaults to \nhref\n\n\n\n\nAlso all of Restangular methods and functions are configurable through restangularFields property.\nAll of these fields except for \nid\n and \nselfLink\n are handled by Restangular, so most of the time you won't change them. You can configure the name of the property that will be binded to all of this fields by setting restangularFields property.\n\n\nsetMethodOverriders\n\n\nYou can now Override HTTP Methods. You can set here the array of methods to override. All those methods will be sent as POST and Restangular will add an X-HTTP-Method-Override header with the real HTTP method we wanted to do.\n\n\nRestangularProvider\n.\nsetMethodOverriders\n([\nGet\n,\nPut\n]);\n\n\n\n\n\nsetDefaultRequestParams\n\n\nYou can set default Query parameters to be sent with every request and every method.\n\n\nAdditionally, if you want to configure request params per method, you can use \nrequestParams\n configuration similar to \n$http\n. For example \nRestangularProvider.requestParams.get = {single: true}\n.\n\n\nSupported method to configure are: remove, get, post, put, common (all)\n\n\n// set params for multiple methods at once\n\n\nRestangularProvider\n.\nsetDefaultRequestParams\n([\nremove\n,\n \npost\n],\n \n{\nconfirm\n:\n \ntrue\n});\n\n\n\n// set only for get method\n\n\nRestangularProvider\n.\nsetDefaultRequestParams\n(\nget\n,\n \n{\nlimit\n:\n \n10\n});\n\n\n\n// or for all supported request methods\n\n\nRestangularProvider\n.\nsetDefaultRequestParams\n({\napikey\n:\n \nsecret key\n});\n\n\n\n\n\nsetFullResponse\n\n\nYou can set fullResponse to true to get the whole response every time you do any request. The full response has the restangularized data in the \ndata\n field, and also has the headers and config sent. By default, it's set to false. Please note that in order for Restangular to access custom HTTP headers, your server must respond having the \nAccess-Control-Expose-Headers:\n set.\n\n\n// set params for multiple methods at once\n\n\nRestangularProvider\n.\nsetFullResponse\n(\ntrue\n);\n\n\n\n\n\nOr set it per service\n\n// Restangular factory that uses setFullResponse\n\n\nexport\n \nconst\n \nREST_FUL_RESPONSE\n \n=\n \nnew\n \nInjectionToken\nany\n(\nRestFulResponse\n);\n\n\nexport\n \nfunction\n \nRestFulResponseFactory\n(\nrestangular\n:\n \nRestangular\n)\n \n{\n\n  \nreturn\n \nrestangular\n.\nwithConfig\n((\nRestangularConfigurer\n)\n \n=\n \n{\n\n    \nRestangularConfigurer\n.\nsetFullResponse\n(\ntrue\n);\n\n  \n});\n\n\n}\n\n\n\n\n// Configure factory in AppModule module\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\nRestangularModule\n],\n\n  \nproviders\n:\n \n[\n\n    \n{\n \nprovide\n:\n \nREST_FUL_RESPONSE\n,\n \nuseFactory\n:\n  \nRestFulResponseFactory\n,\n \ndeps\n:\n \n[\nRestangular\n]\n \n}\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n\n\n// Let\ns use it in the component\n\n\n@\nComponent\n({\n\n  \n...\n\n\n})\n\n\nexport\n \nclass\n \nOtherComponent\n \n{\n\n  \nusers\n;\n\n\n  \nconstructor\n(\n@\nInject\n(\nREST_FUL_RESPONSE\n)\n \npublic\n \nrestFulResponse\n)\n \n{\n\n  \n}\n\n\n  \nngOnInit\n()\n \n{\n\n    \nthis\n.\nrestFulResponse\n.\nall\n(\nusers\n).\ngetList\n().\nsubscribe\n(\n \nresponse\n \n=\n \n{\n\n      \nthis\n.\nusers\n \n=\n \nresponse\n.\ndata\n;\n\n      \nconsole\n.\nlog\n(\nresponse\n.\nheaders\n);\n\n    \n});\n\n  \n}\n\n\n}\n\n\n\n\nsetDefaultHeaders\n\n\nYou can set default Headers to be sent with every request. Send format: {header_name: header_value}\n\n\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\n \nRestangularModule\n,\n \nRestangular\n \n}\n \nfrom\n \nngx-restangular\n;\n\n\n\n// Function for settting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n)\n \n{\n\n  \nRestangularProvider\n.\nsetDefaultHeaders\n({\nAuthorization\n:\n \nBearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1\n});\n\n\n}\n\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \n...\n\n  \nimports\n:\n \n[\n\n    \n// Importing RestangularModule and making default configs for restanglar\n\n    \nRestangularModule\n.\nforRoot\n(\nRestangularConfigFactory\n),\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n\n\n}\n\n\n\n\n\nsetRequestSuffix\n\n\nIf all of your requests require to send some suffix to work, you can set it here. For example, if you need to send the format like \n/users/123.json\n you can add that \n.json\n to the suffix using the \nsetRequestSuffix\n method\n\n\nsetUseCannonicalId\n\n\nYou can set this to either \ntrue\n or \nfalse\n. By default it's false. If set to true, then the cannonical ID from the element will be used for URL creation (in DELETE, PUT, POST, etc.). What this means is that if you change the ID of the element and then you do a put, if you set this to true, it'll use the \"old\" ID which was received from the server. If set to false, it'll use the new ID assigned to the element.\n\n\nsetPlainByDefault\n\n\nYou can set this to \ntrue\n or \nfalse\n. By default it's false. If set to true, data retrieved will be returned with no embed methods from restangular.\n\n\nsetEncodeIds\n\n\nYou can set here if you want to URL Encode IDs or not. By default, it's true.\n\n\n\u8bbf\u95ee\u914d\u7f6e\n\n\nYou can also access the configuration via \nRestangularModule\n and \nRestangular.provider\n via the \nconfiguration\n property if you don't want to use the setters. Check it out:\n\n\nRestangularProvider\n.\nconfiguration\n.\nrequestSuffix\n \n=\n \n/\n;\n\n\n\n\n\n\u5982\u4f55\u5168\u5c40\u914d\u7f6e\u5b83\u4eec\n\n\nYou can configure this in either the \nAppModule\n.\n\n\n\u914d\u7f6e\u5728 \nAppModule\n\n\nimport\n \n{\n \nRestangularModule\n \n}\n \nfrom\n \nngx-restangular\n;\n\n\n\n// Function for settting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n)\n \n{\n\n  \nRestangularProvider\n.\nsetBaseUrl\n(\nhttp://api.restngx.local/v1\n);\n\n  \nRestangularProvider\n.\nsetDefaultHeaders\n({\nAuthorization\n:\n \nBearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1\n});\n\n\n}\n\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \nRestangularModule\n.\nforRoot\n(\nRestangularConfigFactory\n),\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n\n\n}\n\n\n\n\n\nConfiguring in the \nAppModule\n with Dependency Injection applied\n\n\nimport\n \n{\n \nRestangularModule\n \n}\n \nfrom\n \nngx-restangular\n;\n\n\n\n// Function for settting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n,\n \nhttp\n)\n \n{\n\n  \nRestangularProvider\n.\nsetBaseUrl\n(\nhttp://api.restngx.local/v1\n);\n\n  \nRestangularProvider\n.\nsetDefaultHeaders\n({\nAuthorization\n:\n \nBearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1\n});\n\n\n  \n// Example of using Http service inside global config restangular\n\n  \nRestangularProvider\n.\naddElementTransformer\n(\nme\n,\n \ntrue\n,\n \n()=\n{\n\n    \nreturn\n \nhttp\n.\nget\n(\nhttp://api.test.com/v1/users/2\n,\n \n{});\n\n  \n});\n\n\n}\n\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \nRestangularModule\n.\nforRoot\n([\nHttp\n],\n \nRestangularConfigFactory\n),\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n\n\n}\n\n\n\n\n\n\u5982\u4f55\u4f7f\u7528\u4e0e\u5168\u5c40\u670d\u52a1\u4e0d\u540c\u7684\u914d\u7f6e\u521b\u5efaRestangular\u670d\u52a1\n\n\nLet's assume that for most requests you need some configuration (The global one), and for just a bunch of methods you need another configuration. In that case, you'll need to create another Restangular service with this particular configuration. This scoped configuration will inherit all defaults from the global one. Let's see how.\n\n\n// Function for settting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n)\n \n{\n\n  \nRestangularProvider\n.\nsetBaseUrl\n(\nhttp://www.google.com\n);\n\n\n}\n\n\n\n//Restangular service that uses Bing\n\n\nexport\n \nconst\n \nRESTANGULAR_BING\n \n=\n \nnew\n \nInjectionToken\nany\n(\nRestangularBing\n);\n\n\nexport\n \nfunction\n \nRestangularBingFactory\n(\nrestangular\n:\n \nRestangular\n)\n \n{\n\n  \nreturn\n \nrestangular\n.\nwithConfig\n((\nRestangularConfigurer\n)\n \n=\n \n{\n\n     \nRestangularConfigurer\n.\nsetBaseUrl\n(\nhttp://www.bing.com\n);\n\n   \n});\n\n\n}\n\n\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \n// Global configuration\n\n    \nRestangularModule\n.\nforRoot\n(\nRestangularConfigFactory\n),\n\n  \n],\n\n  \nproviders\n:\n \n[\n\n    \n{\n \nprovide\n:\n \nRESTANGULAR_BING\n,\n \nuseFactory\n:\n  \nRestangularBingFactory\n,\n \ndeps\n:\n \n[\nRestangular\n]\n \n}\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n\n\n// Let\ns use it in the component\n\n\n@\nComponent\n({\n\n  \n...\n\n\n})\n\n\nexport\n \nclass\n \nOtherComponent\n \n{\n\n  \nconstructor\n(\n\n    \n@\nInject\n(\nRestangular\n)\n \npublic\n \nRestangular\n,\n\n    \n@\nInject\n(\nRESTANGULAR_BING\n)\n \npublic\n \nRestangularBing\n\n  \n)\n \n{}\n\n\n  \nngOnInit\n()\n \n{\n\n    \n// GET to http://www.google.com/users\n\n    \n// Uses global configuration\n\n    \nRestangular\n.\nall\n(\nusers\n).\ngetList\n()\n\n\n    \n// GET to http://www.bing.com/users\n\n    \n// Uses Bing configuration which is based on Global one, therefore .json is added.\n\n    \nRestangularBing\n.\nall\n(\nusers\n).\ngetList\n()\n\n  \n}\n\n\n};\n\n\n\n\n\n\u89e3\u8026\u7684Restangular\u670d\u52a1\n\n\nThere're some times where you want to use Restangular but you don't want to expose Restangular object anywhere. For those cases, you can actually use the \nservice\n feature of Restangular.\n\n\nLet's see how it works:\n\n\n// Restangular factory that uses Users\n\n\nexport\n \nconst\n \nUSER_REST\n \n=\n \nnew\n \nInjectionToken\nany\n(\nUserRest\n);\n\n\nexport\n \nfunction\n \nUserRestFactory\n(\nrestangular\n:\n \nRestangular\n)\n \n{\n\n  \nreturn\n \nrestangular\n.\nservice\n(\nusers\n);\n\n\n}\n\n\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\nRestangularModule\n],\n\n  \nproviders\n:\n \n[\n\n    \n{\n \nprovide\n:\n \nUSER_REST\n,\n \nuseFactory\n:\n  \nUserRestFactory\n,\n \ndeps\n:\n \n[\nRestangular\n]\n \n}\n \n// Configurating our factory\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n\n\n}\n\n\n\n\n// Let\ns use it in the component\n\n\nexport\n \nclass\n \nOtherComponent\n \n{\n\n  \nconstructor\n(\n@\nInject\n(\nUSER_REST\n)\n \npublic\n \nUser\n)\n \n{\n\n    \nUsers\n.\none\n(\n2\n).\nget\n()\n \n// GET to /users/2\n\n    \nUsers\n.\npost\n({\ndata\n})\n \n// POST to /users\n\n\n    \n// GET to /users\n\n    \nUsers\n.\ngetList\n().\nsubscribe\n(\n \nusers\n \n=\n \n{\n\n      \nvar\n \nuser\n \n=\n \nusers\n[\n0\n];\n \n// user === {id: 1, name: \nTonto\n}\n\n      \nuser\n.\nname\n \n=\n \nGonto\n;\n\n      \n// PUT to /users/1\n\n      \nuser\n.\nput\n();\n\n    \n})\n\n  \n}\n\n\n}\n\n\n\n\n\nWe can also use Nested RESTful resources with this:\n\n\nvar\n \nCars\n \n=\n \nRestangular\n.\nservice\n(\ncars\n,\n \nRestangular\n.\none\n(\nusers\n,\n \n1\n));\n\n\n\nCars\n.\ngetList\n()\n \n// GET to /users/1/cars", 
            "title": "\u914d\u7f6e"
        }, 
        {
            "location": "/starter-guide/configuring/#restangular", 
            "text": "", 
            "title": "\u914d\u7f6eRestangular"
        }, 
        {
            "location": "/starter-guide/configuring/#_1", 
            "text": "Restangular comes with defaults for all of its properties but you can configure them.  So, if you don't need to configure something, there's no need to add the configuration. \nYou can set all these configurations in  RestangularModule  to change the global configuration , you can also  use the  withConfig  method in Restangular service to create a new Restangular service with some scoped configuration  or  use  withConfig  in component to make specified Restangular", 
            "title": "\u5c5e\u6027"
        }, 
        {
            "location": "/starter-guide/configuring/#withconfig", 
            "text": "You can configure Restangular \"withConfig\" like in example below, you can also configure them globally  RestangularModule  or in service with  withConfig  // Function for settting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider )   { \n   RestangularProvider . setBaseUrl ( http://www.google.com );  }  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ \n     // Global configuration \n     RestangularModule . forRoot ( RestangularConfigFactory ), \n   ]  })  export   class   AppModule   {}  // Let s use it in the component  @ Component ({ \n   ...  })  export   class   OtherComponent   { \n   constructor ( private   restangular :   Restangular )   {} \n\n   ngOnInit ()   { \n     restangular . withConfig (( RestangularConfigurer )   =   { \n       RestangularConfigurer . setBaseUrl ( http://www.bing.com ); \n     }). all ( users ). getList () \n   }  };", 
            "title": "withConfig"
        }, 
        {
            "location": "/starter-guide/configuring/#setbaseurl", 
            "text": "The base URL for all calls to your API. For example if your URL for fetching accounts is http://example.com/api/v1/accounts, then your baseUrl is  /api/v1 . The default baseUrl is an empty string which resolves to the same url that Angular2 is running, but you can also set an absolute url like  http://api.example.com/api/v1  if you need to set another domain.", 
            "title": "setBaseUrl"
        }, 
        {
            "location": "/starter-guide/configuring/#setextrafields", 
            "text": "These are the fields that you want to save from your parent resources if you need to display them. By default this is an Empty Array which will suit most cases", 
            "title": "setExtraFields"
        }, 
        {
            "location": "/starter-guide/configuring/#setparentless", 
            "text": "Use this property to control whether Restangularized elements to have a parent or not. So, for example if you get an account and then get a nested list of buildings, you may want the buildings URL to be simple  /buildings/123  instead of  /accounts/123/buildings/123 . This property lets you do that.  This method accepts 1 parameter, it could be:   Boolean: Specifies if all elements should be parentless or not  Array: Specifies the routes (types) of all elements that should be parentless. For example  ['buildings']", 
            "title": "setParentless"
        }, 
        {
            "location": "/starter-guide/configuring/#addelementtransformer", 
            "text": "This is a hook. After each element has been \"restangularized\" (Added the new methods from Restangular), the corresponding transformer will be called if it fits.  This should be used to add your own methods / functions to entities of certain types.  You can add as many element transformers as you want. The signature of this method can be one of the following:    addElementTransformer(route, transformer) : Transformer is called with all elements that have been restangularized, no matter if they're collections or not.    addElementTransformer(route, isCollection, transformer) : Transformer is called with all elements that have been restangularized and match the specification regarding if it's a collection or not (true | false)", 
            "title": "addElementTransformer"
        }, 
        {
            "location": "/starter-guide/configuring/#settransformonlyserverelements", 
            "text": "This sets whether transformers will be run for local objects and not by objects returned by the server. This is by default true but can be changed to false if needed (Most people won't need this).", 
            "title": "setTransformOnlyServerElements"
        }, 
        {
            "location": "/starter-guide/configuring/#setonelemrestangularized", 
            "text": "This is a hook. After each element has been \"restangularized\" (Added the new methods from Restangular), this will be called. It means that if you receive a list of objects in one call, this method will be called first for the collection and then for each element of the collection.  I favor the usage of  addElementTransformer  instead of  onElemRestangularized  whenever possible as the implementation is much cleaner.  This callback is a function that has 4 parameters:   elem : The element that has just been restangularized. Can be a collection or a single element.  isCollection : Boolean indicating if this is a collection or a single element.  what : The model that is being modified. This is the \"path\" of this resource. For example  buildings  Restangular : The instanced service to use any of its methods   This can be used together with  addRestangularMethod  (Explained later) to add custom methods to an element  service . setOnElemRestangularized (( element ,   isCollection ,   what ,   Restangular )   =   { \n   element . newField   =   newField ; \n   return   element ;  });", 
            "title": "setOnElemRestangularized"
        }, 
        {
            "location": "/starter-guide/configuring/#addresponseinterceptor", 
            "text": "The responseInterceptor is called after we get each response from the server. It's a function that receives this arguments:   data : The data received got from the server  operation : The operation made. It'll be the HTTP method used except for a  GET  which returns a list of element which will return  getList  so that you can distinguish them.  what : The model that's being requested. It can be for example:  accounts ,  buildings , etc.  url : The relative URL being requested. For example:  /api/v1/accounts/123  response : Full server response including headers   Some of the use cases of the responseInterceptor are handling wrapped responses and enhancing response elements with more methods among others.  The responseInterceptor must return the restangularized data element.    RestangularProvider . addResponseInterceptor (( data ,   operation ,   what ,   url ,   response )=   { \n        return   data ; \n      }); \n  });", 
            "title": "addResponseInterceptor"
        }, 
        {
            "location": "/starter-guide/configuring/#addfullrequestinterceptor", 
            "text": "This adds a new fullRequestInterceptor. The fullRequestInterceptor is similar to the  requestInterceptor  but more powerful. It lets you change the element, the request parameters and the headers as well.  It's a function that receives the same as the  requestInterceptor  plus the headers and the query parameters (in that order).  It can return an object with any (or all) of following properties:   headers : The headers to send  params : The request parameters to send  element : The element to send   RestangularProvider . addFullRequestInterceptor (( element ,   operation ,   path ,   url ,   headers ,   params )=   { \n    return   { \n      params :   Object . assign ({},   params ,   { sort : name }), \n      headers :   headers , \n      element :   element \n    } \n  });   If a property isn't returned, the one sent is used.", 
            "title": "addFullRequestInterceptor"
        }, 
        {
            "location": "/starter-guide/configuring/#adderrorinterceptor", 
            "text": "The errorInterceptor is called whenever there's an error. It's a function that receives the response, subject and the Restangular-response handler as parameters.  The errorInterceptor function, whenever it returns false, prevents the observable linked to a Restangular request to be executed. All other return values (besides false) are ignored and the observable follows the usual path, eventually reaching the success or error hooks.  The refreshAccesstoken function must return observable. It`s function that will be done before repeating the request, there you can make some actions. In switchMap you might do some transformations to request.  // Function for settting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider ,   authService )   { \n   RestangularProvider . setBaseUrl ( http://api.test.com/v1 ); \n\n   // This function must return observable \n   var   refreshAccesstoken   =   function   ()   { \n     // Here you can make action before repeated request \n     return   authService . functionForTokenUpdate (); \n   }; \n\n   RestangularProvider . addErrorInterceptor (( response ,   subject ,   responseHandler )   =   { \n     if   ( response . status   ===   403 )   { \n\n       refreshAccesstoken () \n       . switchMap ( refreshAccesstokenResponse   =   { \n         //If you want to change request or make with it some actions and give the request to the repeatRequest func. \n         //Or you can live it empty and request will be the same. \n\n         // update Authorization header \n         response . request . headers . set ( Authorization ,   Bearer    +   refreshAccesstokenResponse ) \n\n         return   response . repeatRequest ( response . request ); \n       }) \n       . subscribe ( \n         res   =   responseHandler ( res ), \n         err   =   subject . error ( err ) \n       ); \n\n       return   false ;   // error handled \n     } \n     return   true ;   // error not handled \n   });  }  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   imports :   [ \n     // Importing RestangularModule and making default configs for restanglar \n     RestangularModule . forRoot ([ authService ],   RestangularConfigFactory ), \n   ],  })", 
            "title": "addErrorInterceptor"
        }, 
        {
            "location": "/starter-guide/configuring/#setrestangularfields", 
            "text": "Restangular required 3 fields for every \"Restangularized\" element. These are:   id: Id of the element. Default: id  route: Name of the route of this element. Default: route  parentResource: The reference to the parent resource. Default: parentResource  restangularCollection: A boolean indicating if this is a collection or an element. Default: restangularCollection  cannonicalId: If available, the path to the cannonical ID to use. Useful for PK changes  etag: Where to save the ETag received from the server. Defaults to  restangularEtag  selfLink: The path to the property that has the URL to this item. If your REST API doesn't return a URL to an item, you can just leave it blank. Defaults to  href   Also all of Restangular methods and functions are configurable through restangularFields property.\nAll of these fields except for  id  and  selfLink  are handled by Restangular, so most of the time you won't change them. You can configure the name of the property that will be binded to all of this fields by setting restangularFields property.", 
            "title": "setRestangularFields"
        }, 
        {
            "location": "/starter-guide/configuring/#setmethodoverriders", 
            "text": "You can now Override HTTP Methods. You can set here the array of methods to override. All those methods will be sent as POST and Restangular will add an X-HTTP-Method-Override header with the real HTTP method we wanted to do.  RestangularProvider . setMethodOverriders ([ Get , Put ]);", 
            "title": "setMethodOverriders"
        }, 
        {
            "location": "/starter-guide/configuring/#setdefaultrequestparams", 
            "text": "You can set default Query parameters to be sent with every request and every method.  Additionally, if you want to configure request params per method, you can use  requestParams  configuration similar to  $http . For example  RestangularProvider.requestParams.get = {single: true} .  Supported method to configure are: remove, get, post, put, common (all)  // set params for multiple methods at once  RestangularProvider . setDefaultRequestParams ([ remove ,   post ],   { confirm :   true });  // set only for get method  RestangularProvider . setDefaultRequestParams ( get ,   { limit :   10 });  // or for all supported request methods  RestangularProvider . setDefaultRequestParams ({ apikey :   secret key });", 
            "title": "setDefaultRequestParams"
        }, 
        {
            "location": "/starter-guide/configuring/#setfullresponse", 
            "text": "You can set fullResponse to true to get the whole response every time you do any request. The full response has the restangularized data in the  data  field, and also has the headers and config sent. By default, it's set to false. Please note that in order for Restangular to access custom HTTP headers, your server must respond having the  Access-Control-Expose-Headers:  set.  // set params for multiple methods at once  RestangularProvider . setFullResponse ( true );   Or set it per service // Restangular factory that uses setFullResponse  export   const   REST_FUL_RESPONSE   =   new   InjectionToken any ( RestFulResponse );  export   function   RestFulResponseFactory ( restangular :   Restangular )   { \n   return   restangular . withConfig (( RestangularConfigurer )   =   { \n     RestangularConfigurer . setFullResponse ( true ); \n   });  }  // Configure factory in AppModule module  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ RestangularModule ], \n   providers :   [ \n     {   provide :   REST_FUL_RESPONSE ,   useFactory :    RestFulResponseFactory ,   deps :   [ Restangular ]   } \n   ]  })  export   class   AppModule   {}  // Let s use it in the component  @ Component ({ \n   ...  })  export   class   OtherComponent   { \n   users ; \n\n   constructor ( @ Inject ( REST_FUL_RESPONSE )   public   restFulResponse )   { \n   } \n\n   ngOnInit ()   { \n     this . restFulResponse . all ( users ). getList (). subscribe (   response   =   { \n       this . users   =   response . data ; \n       console . log ( response . headers ); \n     }); \n   }  }", 
            "title": "setFullResponse"
        }, 
        {
            "location": "/starter-guide/configuring/#setdefaultheaders", 
            "text": "You can set default Headers to be sent with every request. Send format: {header_name: header_value}  import   {   NgModule   }   from   @angular/core ;  import   {   RestangularModule ,   Restangular   }   from   ngx-restangular ;  // Function for settting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider )   { \n   RestangularProvider . setDefaultHeaders ({ Authorization :   Bearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1 });  }  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   ... \n   imports :   [ \n     // Importing RestangularModule and making default configs for restanglar \n     RestangularModule . forRoot ( RestangularConfigFactory ), \n   ]  })  export   class   AppModule   {  }", 
            "title": "setDefaultHeaders"
        }, 
        {
            "location": "/starter-guide/configuring/#setrequestsuffix", 
            "text": "If all of your requests require to send some suffix to work, you can set it here. For example, if you need to send the format like  /users/123.json  you can add that  .json  to the suffix using the  setRequestSuffix  method", 
            "title": "setRequestSuffix"
        }, 
        {
            "location": "/starter-guide/configuring/#setusecannonicalid", 
            "text": "You can set this to either  true  or  false . By default it's false. If set to true, then the cannonical ID from the element will be used for URL creation (in DELETE, PUT, POST, etc.). What this means is that if you change the ID of the element and then you do a put, if you set this to true, it'll use the \"old\" ID which was received from the server. If set to false, it'll use the new ID assigned to the element.", 
            "title": "setUseCannonicalId"
        }, 
        {
            "location": "/starter-guide/configuring/#setplainbydefault", 
            "text": "You can set this to  true  or  false . By default it's false. If set to true, data retrieved will be returned with no embed methods from restangular.", 
            "title": "setPlainByDefault"
        }, 
        {
            "location": "/starter-guide/configuring/#setencodeids", 
            "text": "You can set here if you want to URL Encode IDs or not. By default, it's true.", 
            "title": "setEncodeIds"
        }, 
        {
            "location": "/starter-guide/configuring/#_2", 
            "text": "You can also access the configuration via  RestangularModule  and  Restangular.provider  via the  configuration  property if you don't want to use the setters. Check it out:  RestangularProvider . configuration . requestSuffix   =   / ;", 
            "title": "\u8bbf\u95ee\u914d\u7f6e"
        }, 
        {
            "location": "/starter-guide/configuring/#_3", 
            "text": "You can configure this in either the  AppModule .", 
            "title": "\u5982\u4f55\u5168\u5c40\u914d\u7f6e\u5b83\u4eec"
        }, 
        {
            "location": "/starter-guide/configuring/#appmodule", 
            "text": "import   {   RestangularModule   }   from   ngx-restangular ;  // Function for settting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider )   { \n   RestangularProvider . setBaseUrl ( http://api.restngx.local/v1 ); \n   RestangularProvider . setDefaultHeaders ({ Authorization :   Bearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1 });  }  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ \n     RestangularModule . forRoot ( RestangularConfigFactory ), \n   ]  })  export   class   AppModule   {  }", 
            "title": "\u914d\u7f6e\u5728 AppModule"
        }, 
        {
            "location": "/starter-guide/configuring/#configuring-in-the-appmodule-with-dependency-injection-applied", 
            "text": "import   {   RestangularModule   }   from   ngx-restangular ;  // Function for settting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider ,   http )   { \n   RestangularProvider . setBaseUrl ( http://api.restngx.local/v1 ); \n   RestangularProvider . setDefaultHeaders ({ Authorization :   Bearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1 }); \n\n   // Example of using Http service inside global config restangular \n   RestangularProvider . addElementTransformer ( me ,   true ,   ()= { \n     return   http . get ( http://api.test.com/v1/users/2 ,   {}); \n   });  }  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ \n     RestangularModule . forRoot ([ Http ],   RestangularConfigFactory ), \n   ]  })  export   class   AppModule   {  }", 
            "title": "Configuring in the AppModule with Dependency Injection applied"
        }, 
        {
            "location": "/starter-guide/configuring/#restangular_1", 
            "text": "Let's assume that for most requests you need some configuration (The global one), and for just a bunch of methods you need another configuration. In that case, you'll need to create another Restangular service with this particular configuration. This scoped configuration will inherit all defaults from the global one. Let's see how.  // Function for settting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider )   { \n   RestangularProvider . setBaseUrl ( http://www.google.com );  }  //Restangular service that uses Bing  export   const   RESTANGULAR_BING   =   new   InjectionToken any ( RestangularBing );  export   function   RestangularBingFactory ( restangular :   Restangular )   { \n   return   restangular . withConfig (( RestangularConfigurer )   =   { \n      RestangularConfigurer . setBaseUrl ( http://www.bing.com ); \n    });  }  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ \n     // Global configuration \n     RestangularModule . forRoot ( RestangularConfigFactory ), \n   ], \n   providers :   [ \n     {   provide :   RESTANGULAR_BING ,   useFactory :    RestangularBingFactory ,   deps :   [ Restangular ]   } \n   ]  })  export   class   AppModule   {}  // Let s use it in the component  @ Component ({ \n   ...  })  export   class   OtherComponent   { \n   constructor ( \n     @ Inject ( Restangular )   public   Restangular , \n     @ Inject ( RESTANGULAR_BING )   public   RestangularBing \n   )   {} \n\n   ngOnInit ()   { \n     // GET to http://www.google.com/users \n     // Uses global configuration \n     Restangular . all ( users ). getList () \n\n     // GET to http://www.bing.com/users \n     // Uses Bing configuration which is based on Global one, therefore .json is added. \n     RestangularBing . all ( users ). getList () \n   }  };", 
            "title": "\u5982\u4f55\u4f7f\u7528\u4e0e\u5168\u5c40\u670d\u52a1\u4e0d\u540c\u7684\u914d\u7f6e\u521b\u5efaRestangular\u670d\u52a1"
        }, 
        {
            "location": "/starter-guide/configuring/#restangular_2", 
            "text": "There're some times where you want to use Restangular but you don't want to expose Restangular object anywhere. For those cases, you can actually use the  service  feature of Restangular.  Let's see how it works:  // Restangular factory that uses Users  export   const   USER_REST   =   new   InjectionToken any ( UserRest );  export   function   UserRestFactory ( restangular :   Restangular )   { \n   return   restangular . service ( users );  }  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ RestangularModule ], \n   providers :   [ \n     {   provide :   USER_REST ,   useFactory :    UserRestFactory ,   deps :   [ Restangular ]   }   // Configurating our factory \n   ]  })  export   class   AppModule   {  }  // Let s use it in the component  export   class   OtherComponent   { \n   constructor ( @ Inject ( USER_REST )   public   User )   { \n     Users . one ( 2 ). get ()   // GET to /users/2 \n     Users . post ({ data })   // POST to /users \n\n     // GET to /users \n     Users . getList (). subscribe (   users   =   { \n       var   user   =   users [ 0 ];   // user === {id: 1, name:  Tonto } \n       user . name   =   Gonto ; \n       // PUT to /users/1 \n       user . put (); \n     }) \n   }  }   We can also use Nested RESTful resources with this:  var   Cars   =   Restangular . service ( cars ,   Restangular . one ( users ,   1 ));  Cars . getList ()   // GET to /users/1/cars", 
            "title": "\u89e3\u8026\u7684Restangular\u670d\u52a1"
        }, 
        {
            "location": "/starter-guide/methods/", 
            "text": "\u65b9\u6cd5\u8bf4\u660e\n\n\n\u67093\u5957\u65b9\u6cd5\u3002\n\u96c6\u5408\u6709\u4e00\u4e9b\u65b9\u6cd5\uff0c\u5143\u7d20\u6709\u5176\u4ed6\u3002\n\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u4e5f\u6709\u4e00\u4e9b\u5171\u540c\u7684\u65b9\u6cd5\n\n\nRestangular \u65b9\u6cd5\n\n\n\u8fd9\u4e9b\u662f\u53ef\u4ee5\u5728Restangular\u5bf9\u8c61\u4e0a\u8c03\u7528\u7684\u65b9\u6cd5\u3002\n\n\n\n\none(route, id)\n: \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Restangular\u5bf9\u8c61\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u6307\u5411\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\uff0c\u8be5\u5143\u7d20\u5177\u6709\u8def\u7531\nroute\n\u548c\u6307\u5b9a\u7684id\u3002\n\n\nall(route)\n: \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Restangular\u5bf9\u8c61\uff0c\u5b83\u53ea\u662f\u6307\u5411\u6307\u5b9a\u8def\u5f84\u7684\u5143\u7d20\u5217\u8868\u7684\u6307\u9488\u3002\n\n\noneUrl(route, url)\n: This will create a new Restangular object that is just a pointer to one element with the specified URL.\n\n\nallUrl(route, url)\n: This creates a Restangular object that is just a pointer to a list at the specified URL.\n\n\ncopy(fromElement)\n: This will create a copy of the from element so that we can modify the copied one.\n\n\nrestangularizeElement(parent, element, route, queryParams)\n: Restangularizes a new element\n\n\nrestangularizeCollection(parent, element, route, queryParams)\n: Restangularizes a new collection\n\n\n\n\n\u5143\u7d20\u65b9\u6cd5\n\n\n\n\nget([queryParams, headers])\n: Gets the element. Query params and headers are optionals\n\n\ngetList(subElement, [queryParams, headers])\n: Gets a nested resource. subElement is mandatory. \nIt's a string with the name of the nested resource (and URL)\n. For example \nbuildings\n\n\nput([queryParams, headers])\n: Does a put to the current element\n\n\npost(subElement, elementToPost, [queryParams, headers])\n: Does a POST and creates a subElement. Subelement is mandatory and is the nested resource. Element to post is the object to post to the server\n\n\nremove([queryParams, headers])\n: Does a DELETE. By default, \nremove\n sends a request with an empty object, which may cause problems with some servers or browsers. \nThis\n shows how to configure RESTangular to have no payload.\n\n\nhead([queryParams, headers])\n: Does a HEAD\n\n\ntrace([queryParams, headers])\n: Does a TRACE\n\n\noptions([queryParams, headers])\n: Does a OPTIONS\n\n\npatch(object, [queryParams, headers])\n: Does a PATCH\n\n\none(route, id)\n: Used for RequestLess connections and URL Building. See section below.\n\n\nall(route)\n: Used for RequestLess connections and URL Building. See section below.\n\n\nseveral(route, ids*)\n: Used for RequestLess connections and URL Building. See section below.\n\n\noneUrl(route, url)\n: This will create a new Restangular object that is just a pointer to one element with the specified URL.\n\n\nallUrl(route, url)\n: This creates a Restangular object that is just a pointer to a list at the specified URL.\n\n\ngetRestangularUrl()\n: Gets the URL of the current object.\n\n\ngetRequestedUrl()\n: Gets the real URL the current object was requested with (incl. GET parameters). Will equal getRestangularUrl() when no parameters were used, before calling \nget()\n, or when using on a nested child.\n\n\ngetParentList()\n: Gets the parent list to which it belongs (if any)\n\n\nclone()\n: Copies the element. It's an alias to calling \nRestangular.copy(elem)\n.\n\n\nplain()\n: Returns the plain element received from the server without any of the enhanced methods from Restangular. It's an alias to calling \nRestangular.stripRestangular(elem)\n\n\nsave\n: Calling save will determine whether to do PUT or POST accordingly\n\n\n\n\n\u96c6\u5408\u65b9\u6cd5\n\n\n\n\ngetList([queryParams, headers]): Gets itself again (Remember this is a collection)\n.\n\n\nget(id): Gets one item from the collection by id\n.\n\n\npost(elementToPost, [queryParams, headers])\n: Creates a new element of this collection.\n\n\nhead([queryParams, headers])\n: Does a HEAD\n\n\ntrace: ([queryParams, headers])\n: Does a TRACE\n\n\noptions: ([queryParams, headers])\n: Does a OPTIONS\n\n\npatch(object, [queryParams, headers])\n: Does a PATCH\n\n\nremove([queryParams, headers])\n: Does a DELETE. By default, \nremove\n sends a request with an empty object, which may cause problems with some servers or browsers. \nThis\n shows how to configure RESTangular to have no payload.\n\n\n\n\nputElement(index, params, headers)\n: Puts the element on the required index and returns a observable of the updated new array\n\n\nRestangular\n.\nall\n(\nusers\n).\ngetList\n()\n\n\n.\nsubscribe\n(\n \nusers\n \n=\n \n{\n\n  \nusers\n.\nputElement\n(\n2\n,\n \n{\nname\n:\n \nnew name\n});\n\n\n});\n\n\n\n\n\n\n\n\n\ngetRestangularUrl()\n: Gets the URL of the current object.\n\n\n\n\ngetRequestedUrl()\n: Gets the real URL the current object was requested with (incl. GET parameters). Will equal getRestangularUrl() when no parameters were used, before calling \ngetList()\n, or when using on a nested child.\n\n\none(route, id)\n: Used for RequestLess connections and URL Building. See section below.\n\n\nall(route)\n: Used for RequestLess connections and URL Building. See section below.\n\n\nseveral(route, ids*)\n: Used for RequestLess connections and URL Building. See section below.\n\n\noneUrl(route, url)\n: This will create a new Restangular object that is just a pointer to one element with the specified URL.\n\n\nallUrl(route, url)\n: This creates a Restangular object that is just a pointer to a list at the specified URL.\n\n\nclone()\n: Copies the collection. It's an alias to calling \nRestangular.copy(collection)\n.\n\n\n\n\n\u81ea\u5b9a\u4e49\u65b9\u6cd5\n\n\n\n\ncustomGET(path, [params, headers])\n: Does a GET to the specific path. Optionally you can set params and headers.\n\n\ncustomGETLIST(path, [params, headers])\n: Does a GET to the specific path. \nIn this case, you expect to get an array, not a single element\n. Optionally you can set params and headers.\n\n\ncustomDELETE(path, [params, headers])\n: Does a DELETE to the specific path. Optionally you can set params and headers.\n\n\ncustomPOST([elem, path, params, headers])\n: Does a POST to the specific path. Optionally you can set params and headers and elem. Elem is the element to post. If it's not set, it's assumed that it's the element itself from which you're calling this function.\n\n\ncustomPUT([elem, path, params, headers])\n: Does a PUT to the specific path. Optionally you can set params and headers and elem. Elem is the element to post. If it's not set, it's assumed that it's the element itself from which you're calling this function.\n\n\ncustomPATCH([elem, path, params, headers])\n: Does a PATCH to the specific path. Accepts the same arguments as customPUT.\n\n\ncustomOperation(operation, path, [params, headers, elem])\n: This does a custom operation to the path that we specify. This method is actually used from all the others in this subsection. Operation can be one of: get, post, put, remove, head, options, patch, trace\n\n\naddRestangularMethod(name, operation, [path, params, headers, elem])\n: This will add a new restangular method to this object with the name \nname\n to the operation and path specified (or current path otherwise). There's a section on how to do this later.\n\n\n\n\nLet's see an example of this:\n\n\n// GET /accounts/123/messages\n\n\nRestangular\n.\none\n(\naccounts\n,\n \n123\n).\ncustomGET\n(\nmessages\n)\n\n\n\n// GET /accounts/messages?param=param2\n\n\nRestangular\n.\nall\n(\naccounts\n).\ncustomGET\n(\nmessages\n,\n \n{\nparam\n:\n \nparam2\n})", 
            "title": "\u65b9\u6cd5"
        }, 
        {
            "location": "/starter-guide/methods/#_1", 
            "text": "\u67093\u5957\u65b9\u6cd5\u3002\n\u96c6\u5408\u6709\u4e00\u4e9b\u65b9\u6cd5\uff0c\u5143\u7d20\u6709\u5176\u4ed6\u3002\n\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u4e5f\u6709\u4e00\u4e9b\u5171\u540c\u7684\u65b9\u6cd5", 
            "title": "\u65b9\u6cd5\u8bf4\u660e"
        }, 
        {
            "location": "/starter-guide/methods/#restangular", 
            "text": "\u8fd9\u4e9b\u662f\u53ef\u4ee5\u5728Restangular\u5bf9\u8c61\u4e0a\u8c03\u7528\u7684\u65b9\u6cd5\u3002   one(route, id) : \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Restangular\u5bf9\u8c61\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u6307\u5411\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\uff0c\u8be5\u5143\u7d20\u5177\u6709\u8def\u7531 route \u548c\u6307\u5b9a\u7684id\u3002  all(route) : \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684Restangular\u5bf9\u8c61\uff0c\u5b83\u53ea\u662f\u6307\u5411\u6307\u5b9a\u8def\u5f84\u7684\u5143\u7d20\u5217\u8868\u7684\u6307\u9488\u3002  oneUrl(route, url) : This will create a new Restangular object that is just a pointer to one element with the specified URL.  allUrl(route, url) : This creates a Restangular object that is just a pointer to a list at the specified URL.  copy(fromElement) : This will create a copy of the from element so that we can modify the copied one.  restangularizeElement(parent, element, route, queryParams) : Restangularizes a new element  restangularizeCollection(parent, element, route, queryParams) : Restangularizes a new collection", 
            "title": "Restangular \u65b9\u6cd5"
        }, 
        {
            "location": "/starter-guide/methods/#_2", 
            "text": "get([queryParams, headers]) : Gets the element. Query params and headers are optionals  getList(subElement, [queryParams, headers]) : Gets a nested resource. subElement is mandatory.  It's a string with the name of the nested resource (and URL) . For example  buildings  put([queryParams, headers]) : Does a put to the current element  post(subElement, elementToPost, [queryParams, headers]) : Does a POST and creates a subElement. Subelement is mandatory and is the nested resource. Element to post is the object to post to the server  remove([queryParams, headers]) : Does a DELETE. By default,  remove  sends a request with an empty object, which may cause problems with some servers or browsers.  This  shows how to configure RESTangular to have no payload.  head([queryParams, headers]) : Does a HEAD  trace([queryParams, headers]) : Does a TRACE  options([queryParams, headers]) : Does a OPTIONS  patch(object, [queryParams, headers]) : Does a PATCH  one(route, id) : Used for RequestLess connections and URL Building. See section below.  all(route) : Used for RequestLess connections and URL Building. See section below.  several(route, ids*) : Used for RequestLess connections and URL Building. See section below.  oneUrl(route, url) : This will create a new Restangular object that is just a pointer to one element with the specified URL.  allUrl(route, url) : This creates a Restangular object that is just a pointer to a list at the specified URL.  getRestangularUrl() : Gets the URL of the current object.  getRequestedUrl() : Gets the real URL the current object was requested with (incl. GET parameters). Will equal getRestangularUrl() when no parameters were used, before calling  get() , or when using on a nested child.  getParentList() : Gets the parent list to which it belongs (if any)  clone() : Copies the element. It's an alias to calling  Restangular.copy(elem) .  plain() : Returns the plain element received from the server without any of the enhanced methods from Restangular. It's an alias to calling  Restangular.stripRestangular(elem)  save : Calling save will determine whether to do PUT or POST accordingly", 
            "title": "\u5143\u7d20\u65b9\u6cd5"
        }, 
        {
            "location": "/starter-guide/methods/#_3", 
            "text": "getList([queryParams, headers]): Gets itself again (Remember this is a collection) .  get(id): Gets one item from the collection by id .  post(elementToPost, [queryParams, headers]) : Creates a new element of this collection.  head([queryParams, headers]) : Does a HEAD  trace: ([queryParams, headers]) : Does a TRACE  options: ([queryParams, headers]) : Does a OPTIONS  patch(object, [queryParams, headers]) : Does a PATCH  remove([queryParams, headers]) : Does a DELETE. By default,  remove  sends a request with an empty object, which may cause problems with some servers or browsers.  This  shows how to configure RESTangular to have no payload.   putElement(index, params, headers) : Puts the element on the required index and returns a observable of the updated new array  Restangular . all ( users ). getList ()  . subscribe (   users   =   { \n   users . putElement ( 2 ,   { name :   new name });  });     getRestangularUrl() : Gets the URL of the current object.   getRequestedUrl() : Gets the real URL the current object was requested with (incl. GET parameters). Will equal getRestangularUrl() when no parameters were used, before calling  getList() , or when using on a nested child.  one(route, id) : Used for RequestLess connections and URL Building. See section below.  all(route) : Used for RequestLess connections and URL Building. See section below.  several(route, ids*) : Used for RequestLess connections and URL Building. See section below.  oneUrl(route, url) : This will create a new Restangular object that is just a pointer to one element with the specified URL.  allUrl(route, url) : This creates a Restangular object that is just a pointer to a list at the specified URL.  clone() : Copies the collection. It's an alias to calling  Restangular.copy(collection) .", 
            "title": "\u96c6\u5408\u65b9\u6cd5"
        }, 
        {
            "location": "/starter-guide/methods/#_4", 
            "text": "customGET(path, [params, headers]) : Does a GET to the specific path. Optionally you can set params and headers.  customGETLIST(path, [params, headers]) : Does a GET to the specific path.  In this case, you expect to get an array, not a single element . Optionally you can set params and headers.  customDELETE(path, [params, headers]) : Does a DELETE to the specific path. Optionally you can set params and headers.  customPOST([elem, path, params, headers]) : Does a POST to the specific path. Optionally you can set params and headers and elem. Elem is the element to post. If it's not set, it's assumed that it's the element itself from which you're calling this function.  customPUT([elem, path, params, headers]) : Does a PUT to the specific path. Optionally you can set params and headers and elem. Elem is the element to post. If it's not set, it's assumed that it's the element itself from which you're calling this function.  customPATCH([elem, path, params, headers]) : Does a PATCH to the specific path. Accepts the same arguments as customPUT.  customOperation(operation, path, [params, headers, elem]) : This does a custom operation to the path that we specify. This method is actually used from all the others in this subsection. Operation can be one of: get, post, put, remove, head, options, patch, trace  addRestangularMethod(name, operation, [path, params, headers, elem]) : This will add a new restangular method to this object with the name  name  to the operation and path specified (or current path otherwise). There's a section on how to do this later.   Let's see an example of this:  // GET /accounts/123/messages  Restangular . one ( accounts ,   123 ). customGET ( messages )  // GET /accounts/messages?param=param2  Restangular . all ( accounts ). customGET ( messages ,   { param :   param2 })", 
            "title": "\u81ea\u5b9a\u4e49\u65b9\u6cd5"
        }, 
        {
            "location": "/starter-guide/copying-elements/", 
            "text": "\u590d\u5236\u5143\u7d20\n\n\n\u5728\u4fee\u6539\u5bf9\u8c61\u4e4b\u524d\uff0c\u6211\u4eec\u6709\u65f6\u5e0c\u671b\u590d\u5236\u5b83\u7136\u540e\u4fee\u6539\u590d\u5236\u7684\u5bf9\u8c61.\n\u6211\u4eec\u53ef\u4ee5\u7528\nRestangular.copy(fromElement)\n.", 
            "title": "\u62f7\u8d1d\u5143\u7d20"
        }, 
        {
            "location": "/starter-guide/copying-elements/#_1", 
            "text": "\u5728\u4fee\u6539\u5bf9\u8c61\u4e4b\u524d\uff0c\u6211\u4eec\u6709\u65f6\u5e0c\u671b\u590d\u5236\u5b83\u7136\u540e\u4fee\u6539\u590d\u5236\u7684\u5bf9\u8c61.\n\u6211\u4eec\u53ef\u4ee5\u7528 Restangular.copy(fromElement) .", 
            "title": "\u590d\u5236\u5143\u7d20"
        }, 
        {
            "location": "/starter-guide/values-directly/", 
            "text": "\u76f4\u63a5\u5728\u5177\u6709Observables\u7684\u6a21\u677f\u4e2d\u4f7f\u7528\u503c\n\n\n\u5982\u679c\u8981\u5728\u6a21\u677f\u4e2d\u76f4\u63a5\u4f7f\u7528\u503c\uff0c\u8bf7\u4f7f\u7528\nAsyncPipe\n\n\nthis\n.\naccounts\n \n=\n \nthis\n.\nrestangular\n.\nall\n(\naccounts\n).\ngetList\n();\n\n\n\n\n\ntr\n \n*\nngFor\n=\nlet account of accounts | async\n\n  \ntd\n{{account.fullName}}\n/\ntd\n\n\n/\ntr", 
            "title": "\u6a21\u677f\u4e2d\u76f4\u63a5\u4f7f\u7528\u503c"
        }, 
        {
            "location": "/starter-guide/values-directly/#observables", 
            "text": "\u5982\u679c\u8981\u5728\u6a21\u677f\u4e2d\u76f4\u63a5\u4f7f\u7528\u503c\uff0c\u8bf7\u4f7f\u7528 AsyncPipe  this . accounts   =   this . restangular . all ( accounts ). getList ();   tr   * ngFor = let account of accounts | async \n   td {{account.fullName}} / td  / tr", 
            "title": "\u76f4\u63a5\u5728\u5177\u6709Observables\u7684\u6a21\u677f\u4e2d\u4f7f\u7528\u503c"
        }, 
        {
            "location": "/starter-guide/url-building/", 
            "text": "URL\u6784\u5efa\n\n\n\u6709\u65f6\uff0c\u6211\u4eec\u6709\u5f88\u591a\u5d4c\u5957\u5b9e\u4f53\uff08\u53ca\u5176ID\uff09\uff0c\u4f46\u6211\u4eec\u53ea\u60f3\u8981\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\u3002\n\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e3a\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\u505a\u4e00\u5207\u8bf7\u6c42\u662f\u6709\u70b9\u8fc7\u5206\u7684\u3002\n\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u6211\u6dfb\u52a0\u4e86\u4f7f\u7528\u4e0e\u521b\u5efa\u65b0\u7684Restangular\u5bf9\u8c61\u76f8\u540c\u7684API\u521b\u5efaURL\u7684\u53ef\u80fd\u6027\u3002\n\u521b\u5efa\u6b64\u8fde\u63a5\u65f6\u4e0d\u4f1a\u53d1\u51fa\u4efb\u4f55\u8bf7\u6c42\u3002\n\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9:\n\n\nvar\n \nrestangularSpaces\n \n=\n \nRestangular\n.\none\n(\naccounts\n,\n123\n).\none\n(\nbuildings\n,\n \n456\n).\nall\n(\nspaces\n);\n\n\n\n// \u8fd9\u5c06\u505a\u4e00\u4e2a\u5230\u8fbe /accounts/123/buildings/456/spaces\n\n\nrestangularSpaces\n.\ngetList\n()\n\n\n\n// \u8fd9\u5c06\u505a\u4e00\u4e2a\u5230\u8fbe /accounts/123/buildings/456/spaces/789\n\n\nRestangular\n.\none\n(\naccounts\n,\n \n123\n).\none\n(\nbuildings\n,\n \n456\n).\none\n(\nspaces\n,\n \n789\n).\nget\n()\n\n\n\n// POST /accounts/123/buildings/456/spaces\n\n\nRestangular\n.\none\n(\naccounts\n,\n \n123\n).\none\n(\nbuildings\n,\n \n456\n).\nall\n(\nspaces\n).\npost\n({\nname\n:\n \nNew Space\n});\n\n\n\n// DELETE /accounts/123/buildings/456\n\n\nRestangular\n.\none\n(\naccounts\n,\n \n123\n).\none\n(\nbuildings\n,\n \n456\n).\nremove\n();", 
            "title": "\u5730\u5740\u6784\u5efa"
        }, 
        {
            "location": "/starter-guide/url-building/#url", 
            "text": "\u6709\u65f6\uff0c\u6211\u4eec\u6709\u5f88\u591a\u5d4c\u5957\u5b9e\u4f53\uff08\u53ca\u5176ID\uff09\uff0c\u4f46\u6211\u4eec\u53ea\u60f3\u8981\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\u3002\n\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e3a\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\u505a\u4e00\u5207\u8bf7\u6c42\u662f\u6709\u70b9\u8fc7\u5206\u7684\u3002\n\u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u6211\u6dfb\u52a0\u4e86\u4f7f\u7528\u4e0e\u521b\u5efa\u65b0\u7684Restangular\u5bf9\u8c61\u76f8\u540c\u7684API\u521b\u5efaURL\u7684\u53ef\u80fd\u6027\u3002\n\u521b\u5efa\u6b64\u8fde\u63a5\u65f6\u4e0d\u4f1a\u53d1\u51fa\u4efb\u4f55\u8bf7\u6c42\u3002\n\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9:  var   restangularSpaces   =   Restangular . one ( accounts , 123 ). one ( buildings ,   456 ). all ( spaces );  // \u8fd9\u5c06\u505a\u4e00\u4e2a\u5230\u8fbe /accounts/123/buildings/456/spaces  restangularSpaces . getList ()  // \u8fd9\u5c06\u505a\u4e00\u4e2a\u5230\u8fbe /accounts/123/buildings/456/spaces/789  Restangular . one ( accounts ,   123 ). one ( buildings ,   456 ). one ( spaces ,   789 ). get ()  // POST /accounts/123/buildings/456/spaces  Restangular . one ( accounts ,   123 ). one ( buildings ,   456 ). all ( spaces ). post ({ name :   New Space });  // DELETE /accounts/123/buildings/456  Restangular . one ( accounts ,   123 ). one ( buildings ,   456 ). remove ();", 
            "title": "URL\u6784\u5efa"
        }, 
        {
            "location": "/starter-guide/creating-new-methods/", 
            "text": "\u521b\u5efa\u65b0\u7684Restangular\u65b9\u6cd5\n\n\n\u6211\u4eec\u5047\u8bbe\u60a8\u7684API\u9700\u8981\u4e00\u4e9b\u81ea\u5b9a\u4e49\u65b9\u6cd5\u624d\u80fd\u5de5\u4f5c\u3002\n\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u603b\u662f\u4f7f\u7528\u6240\u6709\u53c2\u6570\u4e3a\u8be5\u65b9\u6cd5\u8c03\u7528customGET\u6216customPOST\u662f\u4e00\u4e2a\u75db\u82e6\u7684\u5c41\u80a1\u3002\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a\naddRestangularMethod\n\u65b9\u6cd5\u3002\n\n\n\u8fd9\u53ef\u4ee5\u4e0e\u94a9\u5b50\naddElementTransformer\n\u4e00\u8d77\u4f7f\u7528\u6765\u505a\u4e00\u4e9b\u6574\u6d01\u7684\u4e1c\u897f\u3002\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u6765\u5b66\u4e60\u8fd9\u4e2a:\n\n\n// \u7528\u4e8e\u8bbe\u7f6e\u9ed8\u8ba4\u7684restangular\u914d\u7f6e\u7684\u529f\u80fd\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n)\n \n{\n\n  \n// \u5b83\u5c06\u8f6c\u6362\u6240\u6709\u5efa\u7b51\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u96c6\u5408\n\n  \nRestangularProvider\n.\naddElementTransformer\n(\nbuildings\n,\n \nfalse\n,\n \nfunction\n(\nbuilding\n)\n \n{\n\n    \n// \u8fd9\u5c06\u6dfb\u52a0\u4e00\u4e2a\u540d\u4e3aevaluate\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u4f7f\u7528NO\u7f3a\u7701\u67e5\u8be2\u53c2\u6570\u8fdb\u884c\u8def\u5f84\u6c42\u503c\uff0c\u5e76\u4f7f\u7528\u4e00\u4e9b\u9ed8\u8ba4\u7684\u5934\u7b7e\u540d\uff08name\uff0coperation\uff0cpath\uff0cparams\uff0cheaders\uff0celementToPost\uff09\n\n\n    \nbuilding\n.\naddRestangularMethod\n(\nevaluate\n,\n \nget\n,\n \nevaluate\n,\n \nundefined\n,\n \n{\nmyHeader\n:\n \nvalue\n});\n\n\n    \nreturn\n \nbuilding\n;\n\n  \n});\n\n\n  \nRestangularProvider\n.\naddElementTransformer\n(\nusers\n,\n \ntrue\n,\n \nfunction\n(\nuser\n)\n \n{\n\n    \n// \u8fd9\u5c06\u6dfb\u52a0\u4e00\u4e2a\u540d\u4e3alogin\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u5bf9\u8def\u5f84\u767b\u5f55\u7b7e\u540d\u8fdb\u884cPOST\uff08\u540d\u79f0\uff0c\u64cd\u4f5c\uff0c\u8def\u5f84\uff0c\u53c2\u6570\uff0c\u6807\u9898\uff0celementToPost\uff09\n\n\n    \nuser\n.\naddRestangularMethod\n(\nlogin\n,\n \npost\n,\n \nlogin\n);\n\n\n    \nreturn\n \nuser\n;\n\n  \n});\n\n\n}\n\n\n\n// AppModule\u662f\u8fdb\u5165Angular 2\u5f15\u5bfc\u8fc7\u7a0b\u7684\u4e3b\u8981\u5165\u53e3\u70b9\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \nimports\n:\n \n[\n \n// \u5bfc\u5165Angular\u7684\u6a21\u5757\n\n    \nRestangularModule\n.\nforRoot\n(\nRestangularConfigFactory\n),\n\n  \n],\n\n\n})\n\n\n\n// \u7136\u540e\uff0c\u5728\u60a8\u7684\u4ee3\u7801\u4e2d\u7a0d\u540e\u60a8\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c:\n\n\n\n// \u5230\u8fbe /buildings/123/evaluate?myParam=param \u7528\u6807\u9898myHeader: value\n\n\n\n// \u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u64cd\u4f5c\uff08GET\uff0cOPTIONS\u7b49\uff09\uff0c\u8fd9\u4e2a\u201c\u81ea\u5b9a\u4e49\u521b\u5efa\u201d\u65b9\u6cd5\u7684\u7b7e\u540d\u662f\uff08params\uff0cheaders\uff0celem\uff09\n\n\n// \u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684\u64cd\u4f5c\uff08POST\uff0cPUT\u7b49\uff09\uff0c\u7b7e\u540d\u662f\uff08elem\uff0cparams\uff0cheaders\uff09.\n\n\n\n// \u5982\u679c\u5c06\u67d0\u4e9b\u5185\u5bb9\u8bbe\u7f6e\u4e3a\u6b64\u53d8\u91cf\uff0c\u5219\u5c06\u8986\u76d6\u65b9\u6cd5\u521b\u5efa\u4e2d\u7684\u9ed8\u8ba4\u8bbe\u7f6e\n\n\n// \u5982\u679c\u672a\u8bbe\u7f6e\u4efb\u4f55\u5185\u5bb9\uff0c\u5219\u4f1a\u53d1\u9001\u9ed8\u8ba4\u503c\n\n\nRestangular\n.\none\n(\nbuildings\n,\n \n123\n).\nevaluate\n({\nmyParam\n:\n \nparam\n});\n\n\n\n// \u5230\u8fbe /buildings/123/evaluate?myParam=param \u7528\u6807\u9898myHeader\uff1a: specialHeaderCase\n\n\n\nRestangular\n.\none\n(\nbuildings\n,\n \n123\n).\nevaluate\n({\nmyParam\n:\n \nparam\n},\n \n{\nmyHeader\n:\n \nspecialHeaderCase\n});\n\n\n\n// \u8fd9\u91ccPOST\u7684\u4e3b\u4f53\u5c06\u662f{key\uff1avalue}\uff0c\u56e0\u4e3aPOST\u662f\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684\u64cd\u4f5c\n\n\nRestangular\n.\nall\n(\nusers\n).\nlogin\n({\nkey\n:\n \nvalue\n});", 
            "title": "\u521b\u5efa\u65b0\u65b9\u6cd5"
        }, 
        {
            "location": "/starter-guide/creating-new-methods/#restangular", 
            "text": "\u6211\u4eec\u5047\u8bbe\u60a8\u7684API\u9700\u8981\u4e00\u4e9b\u81ea\u5b9a\u4e49\u65b9\u6cd5\u624d\u80fd\u5de5\u4f5c\u3002\n\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u603b\u662f\u4f7f\u7528\u6240\u6709\u53c2\u6570\u4e3a\u8be5\u65b9\u6cd5\u8c03\u7528customGET\u6216customPOST\u662f\u4e00\u4e2a\u75db\u82e6\u7684\u5c41\u80a1\u3002\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u4e00\u4e2a addRestangularMethod \u65b9\u6cd5\u3002  \u8fd9\u53ef\u4ee5\u4e0e\u94a9\u5b50 addElementTransformer \u4e00\u8d77\u4f7f\u7528\u6765\u505a\u4e00\u4e9b\u6574\u6d01\u7684\u4e1c\u897f\u3002\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u6765\u5b66\u4e60\u8fd9\u4e2a:  // \u7528\u4e8e\u8bbe\u7f6e\u9ed8\u8ba4\u7684restangular\u914d\u7f6e\u7684\u529f\u80fd  export   function   RestangularConfigFactory   ( RestangularProvider )   { \n   // \u5b83\u5c06\u8f6c\u6362\u6240\u6709\u5efa\u7b51\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u96c6\u5408 \n   RestangularProvider . addElementTransformer ( buildings ,   false ,   function ( building )   { \n     // \u8fd9\u5c06\u6dfb\u52a0\u4e00\u4e2a\u540d\u4e3aevaluate\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u4f7f\u7528NO\u7f3a\u7701\u67e5\u8be2\u53c2\u6570\u8fdb\u884c\u8def\u5f84\u6c42\u503c\uff0c\u5e76\u4f7f\u7528\u4e00\u4e9b\u9ed8\u8ba4\u7684\u5934\u7b7e\u540d\uff08name\uff0coperation\uff0cpath\uff0cparams\uff0cheaders\uff0celementToPost\uff09 \n\n     building . addRestangularMethod ( evaluate ,   get ,   evaluate ,   undefined ,   { myHeader :   value }); \n\n     return   building ; \n   }); \n\n   RestangularProvider . addElementTransformer ( users ,   true ,   function ( user )   { \n     // \u8fd9\u5c06\u6dfb\u52a0\u4e00\u4e2a\u540d\u4e3alogin\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u5bf9\u8def\u5f84\u767b\u5f55\u7b7e\u540d\u8fdb\u884cPOST\uff08\u540d\u79f0\uff0c\u64cd\u4f5c\uff0c\u8def\u5f84\uff0c\u53c2\u6570\uff0c\u6807\u9898\uff0celementToPost\uff09 \n\n     user . addRestangularMethod ( login ,   post ,   login ); \n\n     return   user ; \n   });  }  // AppModule\u662f\u8fdb\u5165Angular 2\u5f15\u5bfc\u8fc7\u7a0b\u7684\u4e3b\u8981\u5165\u53e3\u70b9  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   imports :   [   // \u5bfc\u5165Angular\u7684\u6a21\u5757 \n     RestangularModule . forRoot ( RestangularConfigFactory ), \n   ],  })  // \u7136\u540e\uff0c\u5728\u60a8\u7684\u4ee3\u7801\u4e2d\u7a0d\u540e\u60a8\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c:  // \u5230\u8fbe /buildings/123/evaluate?myParam=param \u7528\u6807\u9898myHeader: value  // \u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u64cd\u4f5c\uff08GET\uff0cOPTIONS\u7b49\uff09\uff0c\u8fd9\u4e2a\u201c\u81ea\u5b9a\u4e49\u521b\u5efa\u201d\u65b9\u6cd5\u7684\u7b7e\u540d\u662f\uff08params\uff0cheaders\uff0celem\uff09  // \u5982\u679c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684\u64cd\u4f5c\uff08POST\uff0cPUT\u7b49\uff09\uff0c\u7b7e\u540d\u662f\uff08elem\uff0cparams\uff0cheaders\uff09.  // \u5982\u679c\u5c06\u67d0\u4e9b\u5185\u5bb9\u8bbe\u7f6e\u4e3a\u6b64\u53d8\u91cf\uff0c\u5219\u5c06\u8986\u76d6\u65b9\u6cd5\u521b\u5efa\u4e2d\u7684\u9ed8\u8ba4\u8bbe\u7f6e  // \u5982\u679c\u672a\u8bbe\u7f6e\u4efb\u4f55\u5185\u5bb9\uff0c\u5219\u4f1a\u53d1\u9001\u9ed8\u8ba4\u503c  Restangular . one ( buildings ,   123 ). evaluate ({ myParam :   param });  // \u5230\u8fbe /buildings/123/evaluate?myParam=param \u7528\u6807\u9898myHeader\uff1a: specialHeaderCase  Restangular . one ( buildings ,   123 ). evaluate ({ myParam :   param },   { myHeader :   specialHeaderCase });  // \u8fd9\u91ccPOST\u7684\u4e3b\u4f53\u5c06\u662f{key\uff1avalue}\uff0c\u56e0\u4e3aPOST\u662f\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684\u64cd\u4f5c  Restangular . all ( users ). login ({ key :   value });", 
            "title": "\u521b\u5efa\u65b0\u7684Restangular\u65b9\u6cd5"
        }, 
        {
            "location": "/starter-guide/adding-custom-methods-to-collections/", 
            "text": "\u5c06\u81ea\u5b9a\u4e49\u65b9\u6cd5\u6dfb\u52a0\u5230\u96c6\u5408\n\n\n\u4f7f\u7528\nRestangular.extendCollection()\n\u4e3a\u96c6\u5408\u521b\u5efa\u81ea\u5b9a\u4e49\u65b9\u6cd5\u3002\n\u8fd9\u662f\u522b\u540d:\n\n\n  \nRestangularProvider\n.\naddElementTransformer\n(\nroute\n,\n \ntrue\n,\n \nfn\n);\n\n\n\n\n\n\u4f8b\n\n\n  \n// \u4e3a\u60a8\u7684\u96c6\u5408\u521b\u5efa\u65b9\u6cd5\n\n  \nRestangular\n.\nextendCollection\n(\naccounts\n,\n \nfunction\n(\ncollection\n)\n \n{\n\n    \ncollection\n.\ntotalAmount\n \n=\n \nfunction\n()\n \n{\n\n      \n// \u8fd9\u91cc\u5b9e\u65bd\n\n    \n};\n\n\n    \nreturn\n \ncollection\n;\n\n  \n});\n\n\n  \nvar\n \naccounts$\n \n=\n \nRestangular\n.\nall\n(\naccounts\n).\ngetList\n();\n\n\n  \naccounts$\n.\nsubscribe\n(\n \naccounts\n \n=\n \n{\n\n    \naccounts\n.\ntotalAmount\n();\n \n// \u8c03\u7528\u81ea\u5b9a\u4e49\u96c6\u5408\u65b9\u6cd5\n\n  \n});", 
            "title": "\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65b9\u6cd5\u5230\u96c6\u5408"
        }, 
        {
            "location": "/starter-guide/adding-custom-methods-to-collections/#_1", 
            "text": "\u4f7f\u7528 Restangular.extendCollection() \u4e3a\u96c6\u5408\u521b\u5efa\u81ea\u5b9a\u4e49\u65b9\u6cd5\u3002\n\u8fd9\u662f\u522b\u540d:     RestangularProvider . addElementTransformer ( route ,   true ,   fn );", 
            "title": "\u5c06\u81ea\u5b9a\u4e49\u65b9\u6cd5\u6dfb\u52a0\u5230\u96c6\u5408"
        }, 
        {
            "location": "/starter-guide/adding-custom-methods-to-collections/#_2", 
            "text": "// \u4e3a\u60a8\u7684\u96c6\u5408\u521b\u5efa\u65b9\u6cd5 \n   Restangular . extendCollection ( accounts ,   function ( collection )   { \n     collection . totalAmount   =   function ()   { \n       // \u8fd9\u91cc\u5b9e\u65bd \n     }; \n\n     return   collection ; \n   }); \n\n   var   accounts$   =   Restangular . all ( accounts ). getList (); \n\n   accounts$ . subscribe (   accounts   =   { \n     accounts . totalAmount ();   // \u8c03\u7528\u81ea\u5b9a\u4e49\u96c6\u5408\u65b9\u6cd5 \n   });", 
            "title": "\u4f8b"
        }, 
        {
            "location": "/starter-guide/adding-custom-methods-to-models/", 
            "text": "\u5411\u6a21\u578b\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65b9\u6cd5\n\n\n\u4f7f\u7528Restangular.extendModel()\u4e3a\u6a21\u578b\u521b\u5efa\u81ea\u5b9a\u4e49\u65b9\u6cd5\u3002 \u8fd9\u662f\u522b\u540d:\n\n\n  \nRestangularProvider\n.\naddElementTransformer\n(\nroute\n,\n \nfalse\n,\n \nfn\n);\n\n\n\n\n\n\u4f8b\n\n\n  \nRestangular\n.\nextendModel\n(\naccounts\n,\n \nfunction\n(\nmodel\n)\n \n{\n\n    \nmodel\n.\nprettifyAmount\n \n=\n \nfunction\n()\n \n{};\n\n    \nreturn\n \nmodel\n;\n\n  \n});\n\n\n  \nvar\n \naccount$\n \n=\n \nRestangular\n.\none\n(\naccounts\n,\n \n1\n).\nget\n();\n\n\n  \naccount$\n.\nsubscribe\n(\nfunction\n(\naccount\n)\n \n{\n\n    \naccount\n.\nprettifyAmount\n();\n \n// invoke your custom model method\n\n  \n});", 
            "title": "\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65b9\u6cd5\u5230\u6a21\u578b"
        }, 
        {
            "location": "/starter-guide/adding-custom-methods-to-models/#_1", 
            "text": "\u4f7f\u7528Restangular.extendModel()\u4e3a\u6a21\u578b\u521b\u5efa\u81ea\u5b9a\u4e49\u65b9\u6cd5\u3002 \u8fd9\u662f\u522b\u540d:     RestangularProvider . addElementTransformer ( route ,   false ,   fn );", 
            "title": "\u5411\u6a21\u578b\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65b9\u6cd5"
        }, 
        {
            "location": "/starter-guide/adding-custom-methods-to-models/#_2", 
            "text": "Restangular . extendModel ( accounts ,   function ( model )   { \n     model . prettifyAmount   =   function ()   {}; \n     return   model ; \n   }); \n\n   var   account$   =   Restangular . one ( accounts ,   1 ). get (); \n\n   account$ . subscribe ( function ( account )   { \n     account . prettifyAmount ();   // invoke your custom model method \n   });", 
            "title": "\u4f8b"
        }, 
        {
            "location": "/starter-guide/faq/", 
            "text": "FAQ\n\n\n\u6211\u8be5\u5982\u4f55\u5904\u7406\u9519\u8bef?\n\u53ef\u4ee5\u5728\u8ba2\u9605\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e0a\u68c0\u67e5\u9519\u8bef\u3002\nRestangular\n.\nall\n(\naccounts\n).\ngetList\n().\nsubscribe\n(\n \nresponse\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nAll ok\n);\n\n\n},\n \nerrorResponse\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nError with status code\n,\n \nerrorResponse\n.\nstatus\n);\n\n\n});\n\n\n\n\n\u6211\u9700\u8981\u5728\u6bcf\u4e2aRestangular\u8bf7\u6c42\u4e2d\u53d1\u9001\u6388\u6743\u4ee4\u724c\uff0c\u6211\u8be5\u600e\u4e48\u505a\uff1f\n\u4f60\u53ef\u4ee5\u4f7f\u7528\nsetDefaultHeaders\n\u6216\naddFullRequestInterceptor\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n./app.component\n;\n\n\nimport\n \n{\n \nRestangularModule\n \n}\n \nfrom\n \nngx-restangular\n;\n\n\nimport\n \n{\n \nauthService\n \n}\n \nfrom\n \n../your-services\n;\n\n\n\n// Function for settting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n,\n \nauthService\n)\n \n{\n\n\n  \n// set static header\n\n  \nRestangularProvider\n.\nsetDefaultHeaders\n({\nAuthorization\n:\n \nBearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1\n});\n\n\n  \n// by each request to the server receive a token and update headers with it\n\n  \nRestangularProvider\n.\naddFullRequestInterceptor\n((\nelement\n,\n \noperation\n,\n \npath\n,\n \nurl\n,\n \nheaders\n,\n \nparams\n)\n \n=\n \n{\n\n    \nlet\n \nbearerToken\n \n=\n \nauthService\n.\ngetBearerToken\n();\n\n\n    \nreturn\n \n{\n\n      \nheaders\n:\n \nObject\n.\nassign\n({},\n \nheaders\n,\n \n{\nAuthorization\n:\n \n`Bearer \n${\nbearerToken\n}\n`\n})\n\n    \n};\n\n  \n});\n\n\n}\n\n\n\n// AppModule is the main entry point into Angular2 bootstraping process\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \n// Importing RestangularModule and making default configs for restanglar\n\n    \nRestangularModule\n.\nforRoot\n([\nauthService\n],\n \nRestangularConfigFactory\n),\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n\n\n}\n\n\n\n\n\u6211\u9700\u8981\u5728\u6bcf\u4e2aRestangular\u8bf7\u6c42\u4e2d\u53d1\u9001\u4e00\u4e2a\u6807\u5934\uff0c\u6211\u8be5\u600e\u4e48\u505a\uff1f\n\u60a8\u53ef\u4ee5\u4f7f\u7528\ndefaultHeaders\n\u5c5e\u6027\u3002 \ndefaultsHeaders\n\u53ef\u4ee5\u7528\nwithConfig\n\u4f5c\u4e3a\u8303\u56f4\uff0c\u6240\u4ee5\u5b83\u975e\u5e38\u9177\u3002\nHow can I send a delete WITHOUT a body?\nYou must add a requestInterceptor for this.\nRestangularProvider\n.\nsetRequestInterceptor\n(\nfunction\n(\nelem\n,\n \noperation\n)\n \n{\n\n  \nif\n \n(\noperation\n \n===\n \nremove\n)\n \n{\n\n    \nreturn\n \nnull\n;\n\n  \n}\n\n  \nreturn\n \nelem\n;\n\n\n})\n\n\n\n\n\u6211\u4f7f\u7528Mongo\uff0c\u5143\u7d20\u7684ID\u662f\n_id\n\u800c\u4e0d\u662f\nid\n\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u672a\u5b9a\u4e49\u7684\u8def\u7531\nWhat you need to do is to configure the \nRestangularFields\n and set the \nid\n field to \n_id\n. Let's see how:\nRestangularProvider\n.\nsetRestangularFields\n({\n\n  \nid\n:\n \n_id\n\n\n});\n\n\n\n\n\u5982\u679c\u6211\u7684\u6bcf\u4e2a\u6a21\u578b\u90fd\u6709\u4e0d\u540c\u7684ID\u540d\u79f0\uff0c\u4f8b\u5982CustomerID for Customer\uff0c\u8be5\u600e\u4e48\u529e\uff1f\nIn some cases, people have different ID name for each entity. For example, they have CustomerID for customer and EquipmentID for Equipment. If that's the case, you can override Restangular's getIdFromElem. For that, you need to do:\nRestangularProvider\n.\nconfiguration\n.\ngetIdFromElem\n \n=\n \nfunction\n(\nelem\n)\n \n{\n\n  \n// if route is customers ==\n returns customerID\n\n  \nreturn\n \nelem\n[\n_\n.\ninitial\n(\nelem\n.\nroute\n).\njoin\n(\n)\n \n+\n \nID\n];\n\n\n}\n\n\n\n\nWith that, you'd get what you need :)\n\u5982\u4f55\u4f7f\u7528Restangular\u5728\u6211\u7684\u8bf7\u6c42\u4e2d\u53d1\u9001\u6587\u4ef6\uff1f\nThis can be done using the customPOST / customPUT method. Look at the following example:\nRestangular\n.\nall\n(\nusers\n)\n\n\n.\ncustomPOST\n(\nformData\n,\n \nundefined\n,\n \nundefined\n,\n \n{\n \nContent-Type\n:\n \nundefined\n \n});\n\n\n\n\nThis basically tells the request to use the \nContent-Type: multipart/form-data\n as the header. Also \nformData\n is the body of the request, be sure to add all the params here, including the File you want to send of course.\n\u5982\u4f55\u5904\u7406Restangular\u8fd4\u56de\u7684List\u4e2d\u7684CRUD\u64cd\u4f5c\uff1f\nRestangular\n.\nall\n(\nusers\n).\ngetList\n().\nsubscribe\n(\n \nusers\n \n=\n \n{\n\n  \nthis\n.\nusers\n \n=\n \nusers\n;\n\n  \nvar\n \nuserWithId\n \n=\n \n_\n.\nfind\n(\nusers\n,\n \nfunction\n(\nuser\n)\n \n{\n\n    \nreturn\n \nuser\n.\nid\n \n===\n \n123\n;\n\n  \n});\n\n\n  \nuserWithId\n.\nname\n \n=\n \nGonto\n;\n\n  \nuserWithId\n.\nput\n();\n\n\n  \n// Alternatively delete the element from the list when finished\n\n  \nuserWithId\n.\nremove\n().\nsubscribe\n(\n \n()\n \n=\n \n{\n\n    \n// Updating the list and removing the user after the response is OK.\n\n    \nthis\n.\nusers\n \n=\n \n_\n.\nwithout\n(\nthis\n.\nusers\n,\n \nuserWithId\n);\n\n  \n});\n\n\n\n});\n\n\n\n\n\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u4fdd\u6301\u96c6\u5408\u7684\u91cd\u65b0\u7ec4\u5408\nWhile the example above removes the deleted user from the collection, it also overwrites the collection object with a plain array (because of \n_.without\n) which no longer knows about its Restangular attributes.\nIf want to keep the restangularized collection, remove the element by modifying the collection in place:\nuserWithId\n.\nremove\n().\nsubscribe\n(\n \n()\n \n=\n \n{\n\n  \nlet\n \nindex\n \n=\n \n$scope\n.\nusers\n.\nindexOf\n(\nuserWithId\n);\n\n  \nif\n \n(\nindex\n \n \n-\n1\n)\n \nthis\n.\nusers\n.\nsplice\n(\nindex\n,\n \n1\n);\n\n\n});\n\n\n\n\n\u5982\u4f55\u8bbf\u95ee\nunrestangularized\n\u5143\u7d20\u4ee5\u53ca\nrestangularized\n\u5143\u7d20\uff1f\nIn order to get this done, you need to use the \nresponseExtractor\n. You need to set a property there that will point to the original response received. Also, you need to actually copy this response as that response is the one that's going to be \nrestangularized\n later\nRestangularProvider\n.\nsetResponseExtractor\n(\n \n(\nresponse\n)\n \n=\n \n{\n\n  \nvar\n \nnewResponse\n \n=\n \nresponse\n;\n\n  \nif\n \n(\n_\n.\nisArray\n(\nresponse\n))\n \n{\n\n    \n_\n.\nforEach\n(\nnewResponse\n,\n \nfunction\n(\nvalue\n,\n \nkey\n)\n \n{\n\n      \nnewResponse\n[\nkey\n].\noriginalElement\n \n=\n \n_\n.\nclone\n(\nvalue\n);\n\n    \n});\n\n  \n}\n \nelse\n \n{\n\n    \nnewResponse\n.\noriginalElement\n \n=\n \n_\n.\nclone\n(\nresponse\n);\n\n  \n}\n\n\n  \nreturn\n \nnewResponse\n;\n\n\n});\n\n\n\n\nAlternatively, if you just want the stripped out response on any given call, you can use the .plain() method, doing something like this:\nthis\n.\nshowData\n \n=\n \nfunction\n \n()\n \n{\n\n  \nbaseUrl\n.\npost\n(\nsomeData\n).\nsubscribe\n(\n \n(\nresponse\n)\n \n=\n \n{\n\n    \nconsole\n.\nlog\n(\nresponse\n.\nplain\n());\n\n  \n});\n\n\n};\n\n\n\n\n\u5982\u4f55\u5728\u8bf7\u6c42\u4e2d\u6dfb\u52a0withCredentials\u53c2\u6570\uff1f\n// Function for settting the default restangular configuration\n\n\nexport\n \nfunction\n \nRestangularConfigFactory\n \n(\nRestangularProvider\n)\n \n{\n\n  \n// Adding withCredential parametr to all Restangular requests\n\n  \nRestangularProvider\n.\nsetDefaultHttpFields\n({\n \nwithCredentials\n:\n \ntrue\n \n});\n\n\n}\n\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \n// Global configuration\n\n    \nRestangularModule\n.\nforRoot\n(\nRestangularConfigFactory\n),\n\n  \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}", 
            "title": "FAQ"
        }, 
        {
            "location": "/starter-guide/faq/#faq", 
            "text": "\u6211\u8be5\u5982\u4f55\u5904\u7406\u9519\u8bef? \u53ef\u4ee5\u5728\u8ba2\u9605\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e0a\u68c0\u67e5\u9519\u8bef\u3002 Restangular . all ( accounts ). getList (). subscribe (   response   =   { \n   console . log ( All ok );  },   errorResponse   =   { \n   console . log ( Error with status code ,   errorResponse . status );  });   \u6211\u9700\u8981\u5728\u6bcf\u4e2aRestangular\u8bf7\u6c42\u4e2d\u53d1\u9001\u6388\u6743\u4ee4\u724c\uff0c\u6211\u8be5\u600e\u4e48\u505a\uff1f \u4f60\u53ef\u4ee5\u4f7f\u7528 setDefaultHeaders \u6216 addFullRequestInterceptor import   {   NgModule   }   from   @angular/core ;  import   {   AppComponent   }   from   ./app.component ;  import   {   RestangularModule   }   from   ngx-restangular ;  import   {   authService   }   from   ../your-services ;  // Function for settting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider ,   authService )   { \n\n   // set static header \n   RestangularProvider . setDefaultHeaders ({ Authorization :   Bearer UDXPx-Xko0w4BRKajozCVy20X11MRZs1 }); \n\n   // by each request to the server receive a token and update headers with it \n   RestangularProvider . addFullRequestInterceptor (( element ,   operation ,   path ,   url ,   headers ,   params )   =   { \n     let   bearerToken   =   authService . getBearerToken (); \n\n     return   { \n       headers :   Object . assign ({},   headers ,   { Authorization :   `Bearer  ${ bearerToken } ` }) \n     }; \n   });  }  // AppModule is the main entry point into Angular2 bootstraping process  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ \n     // Importing RestangularModule and making default configs for restanglar \n     RestangularModule . forRoot ([ authService ],   RestangularConfigFactory ), \n   ]  })  export   class   AppModule   {  }   \u6211\u9700\u8981\u5728\u6bcf\u4e2aRestangular\u8bf7\u6c42\u4e2d\u53d1\u9001\u4e00\u4e2a\u6807\u5934\uff0c\u6211\u8be5\u600e\u4e48\u505a\uff1f \u60a8\u53ef\u4ee5\u4f7f\u7528 defaultHeaders \u5c5e\u6027\u3002  defaultsHeaders \u53ef\u4ee5\u7528 withConfig \u4f5c\u4e3a\u8303\u56f4\uff0c\u6240\u4ee5\u5b83\u975e\u5e38\u9177\u3002 How can I send a delete WITHOUT a body? You must add a requestInterceptor for this. RestangularProvider . setRequestInterceptor ( function ( elem ,   operation )   { \n   if   ( operation   ===   remove )   { \n     return   null ; \n   } \n   return   elem ;  })   \u6211\u4f7f\u7528Mongo\uff0c\u5143\u7d20\u7684ID\u662f _id \u800c\u4e0d\u662f id \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u8bf7\u6c42\u88ab\u53d1\u9001\u5230\u672a\u5b9a\u4e49\u7684\u8def\u7531 What you need to do is to configure the  RestangularFields  and set the  id  field to  _id . Let's see how: RestangularProvider . setRestangularFields ({ \n   id :   _id  });   \u5982\u679c\u6211\u7684\u6bcf\u4e2a\u6a21\u578b\u90fd\u6709\u4e0d\u540c\u7684ID\u540d\u79f0\uff0c\u4f8b\u5982CustomerID for Customer\uff0c\u8be5\u600e\u4e48\u529e\uff1f In some cases, people have different ID name for each entity. For example, they have CustomerID for customer and EquipmentID for Equipment. If that's the case, you can override Restangular's getIdFromElem. For that, you need to do: RestangularProvider . configuration . getIdFromElem   =   function ( elem )   { \n   // if route is customers ==  returns customerID \n   return   elem [ _ . initial ( elem . route ). join ( )   +   ID ];  }   With that, you'd get what you need :) \u5982\u4f55\u4f7f\u7528Restangular\u5728\u6211\u7684\u8bf7\u6c42\u4e2d\u53d1\u9001\u6587\u4ef6\uff1f This can be done using the customPOST / customPUT method. Look at the following example: Restangular . all ( users )  . customPOST ( formData ,   undefined ,   undefined ,   {   Content-Type :   undefined   });   This basically tells the request to use the  Content-Type: multipart/form-data  as the header. Also  formData  is the body of the request, be sure to add all the params here, including the File you want to send of course. \u5982\u4f55\u5904\u7406Restangular\u8fd4\u56de\u7684List\u4e2d\u7684CRUD\u64cd\u4f5c\uff1f Restangular . all ( users ). getList (). subscribe (   users   =   { \n   this . users   =   users ; \n   var   userWithId   =   _ . find ( users ,   function ( user )   { \n     return   user . id   ===   123 ; \n   }); \n\n   userWithId . name   =   Gonto ; \n   userWithId . put (); \n\n   // Alternatively delete the element from the list when finished \n   userWithId . remove (). subscribe (   ()   =   { \n     // Updating the list and removing the user after the response is OK. \n     this . users   =   _ . without ( this . users ,   userWithId ); \n   });  });   \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u4fdd\u6301\u96c6\u5408\u7684\u91cd\u65b0\u7ec4\u5408 While the example above removes the deleted user from the collection, it also overwrites the collection object with a plain array (because of  _.without ) which no longer knows about its Restangular attributes. If want to keep the restangularized collection, remove the element by modifying the collection in place: userWithId . remove (). subscribe (   ()   =   { \n   let   index   =   $scope . users . indexOf ( userWithId ); \n   if   ( index     - 1 )   this . users . splice ( index ,   1 );  });   \u5982\u4f55\u8bbf\u95ee unrestangularized \u5143\u7d20\u4ee5\u53ca restangularized \u5143\u7d20\uff1f In order to get this done, you need to use the  responseExtractor . You need to set a property there that will point to the original response received. Also, you need to actually copy this response as that response is the one that's going to be  restangularized  later RestangularProvider . setResponseExtractor (   ( response )   =   { \n   var   newResponse   =   response ; \n   if   ( _ . isArray ( response ))   { \n     _ . forEach ( newResponse ,   function ( value ,   key )   { \n       newResponse [ key ]. originalElement   =   _ . clone ( value ); \n     }); \n   }   else   { \n     newResponse . originalElement   =   _ . clone ( response ); \n   } \n\n   return   newResponse ;  });   Alternatively, if you just want the stripped out response on any given call, you can use the .plain() method, doing something like this: this . showData   =   function   ()   { \n   baseUrl . post ( someData ). subscribe (   ( response )   =   { \n     console . log ( response . plain ()); \n   });  };   \u5982\u4f55\u5728\u8bf7\u6c42\u4e2d\u6dfb\u52a0withCredentials\u53c2\u6570\uff1f // Function for settting the default restangular configuration  export   function   RestangularConfigFactory   ( RestangularProvider )   { \n   // Adding withCredential parametr to all Restangular requests \n   RestangularProvider . setDefaultHttpFields ({   withCredentials :   true   });  }  @ NgModule ({ \n   bootstrap :   [   AppComponent   ], \n   declarations :   [ \n     AppComponent , \n   ], \n   imports :   [ \n     // Global configuration \n     RestangularModule . forRoot ( RestangularConfigFactory ), \n   ]  })  export   class   AppModule   {}", 
            "title": "FAQ"
        }, 
        {
            "location": "/demo/", 
            "text": "\u6f14\u793a\n\n\nPlunkr\u73b0\u573a\u6f14\u793a\n\u82f1\u96c4\u5e94\u7528\n.\n\u60a8\u8fd8\u53ef\u4ee5\u5728\n\u7b80\u5355TODO\u5e94\u7528\u7a0b\u5e8f\n\u4e2d\u67e5\u770b\u6709\u5173\u4f7f\u7528ngx-restangular\u548c\nrestdb.io\n\u670d\u52a1\u7684\u5e16\u5b50.", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/demo/#_1", 
            "text": "Plunkr\u73b0\u573a\u6f14\u793a \u82f1\u96c4\u5e94\u7528 .\n\u60a8\u8fd8\u53ef\u4ee5\u5728 \u7b80\u5355TODO\u5e94\u7528\u7a0b\u5e8f \u4e2d\u67e5\u770b\u6709\u5173\u4f7f\u7528ngx-restangular\u548c restdb.io \u670d\u52a1\u7684\u5e16\u5b50.", 
            "title": "\u6f14\u793a"
        }, 
        {
            "location": "/current-stage/", 
            "text": "\u73b0\u9636\u6bb5\n\n\nNgx-restangular\u51e0\u4e4e\u6240\u6709\u529f\u80fd\u90fd\u662f\u4eceRestangular\u4f20\u8f93\u7684\u3002\n\u6211\u4eec\u5bf9\u5176\u8fdb\u4e00\u6b65\u53d1\u5c55\u65b9\u9762\u7684\u4efb\u4f55\u5408\u4f5c\u6301\u5f00\u653e\u6001\u5ea6\u3002", 
            "title": "\u5f53\u524d"
        }, 
        {
            "location": "/current-stage/#_1", 
            "text": "Ngx-restangular\u51e0\u4e4e\u6240\u6709\u529f\u80fd\u90fd\u662f\u4eceRestangular\u4f20\u8f93\u7684\u3002\n\u6211\u4eec\u5bf9\u5176\u8fdb\u4e00\u6b65\u53d1\u5c55\u65b9\u9762\u7684\u4efb\u4f55\u5408\u4f5c\u6301\u5f00\u653e\u6001\u5ea6\u3002", 
            "title": "\u73b0\u9636\u6bb5"
        }, 
        {
            "location": "/renaming/", 
            "text": "\u5c06\u9879\u76ee\u4eceng2-restangular\u91cd\u547d\u540d\u4e3angx-restangular\n\n\n\u7531\u4e8eAngular Core Team\u5b9e\u65bd\u4e86\u8bed\u4e49\u7248\u672c\u63a7\u5236\uff0c\u8be5\u9879\u76ee\u4ece\nng2-restangular\n\u91cd\u547d\u540d\u4e3a\nngx-restangular\n\u3002\nNPM\u540d\u79f0\u4e5f\u5df2\u66f4\u6539\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\nnpm install ngx-restangular\n\u5b89\u88c5\u9879\u76ee\u7684\u5b9e\u9645\u7248\u672c\u3002", 
            "title": "\u91cd\u547d\u540d"
        }, 
        {
            "location": "/renaming/#ng2-restangularngx-restangular", 
            "text": "\u7531\u4e8eAngular Core Team\u5b9e\u65bd\u4e86\u8bed\u4e49\u7248\u672c\u63a7\u5236\uff0c\u8be5\u9879\u76ee\u4ece ng2-restangular \u91cd\u547d\u540d\u4e3a ngx-restangular \u3002\nNPM\u540d\u79f0\u4e5f\u5df2\u66f4\u6539\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 npm install ngx-restangular \u5b89\u88c5\u9879\u76ee\u7684\u5b9e\u9645\u7248\u672c\u3002", 
            "title": "\u5c06\u9879\u76ee\u4eceng2-restangular\u91cd\u547d\u540d\u4e3angx-restangular"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\n\u5982\u4f55\u5728\u89d2\u5ea65\u4e2d\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u7684\u9879\u76ee\u4e2d\uff1f\n\n\nYou can download this by npm and running \nnpm install ngx-restangular\n. This will install latest version of ngx-restangular (v.2.0.0).\n\n\n\u5982\u4f55\u4ee5\u89d2\u5ea64\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u7684\u9879\u76ee\u4e2d\uff1f\n\n\nYou can download this by npm and running \nnpm install --save ngx-restangular@1.0.13\n\n\nVersions from 1.0.14 to 1.1.4 are deprecated. Npm warns you after their installation. Those versions would be removed.\n\n\n\u5982\u4f55\u4ee5\u89d2\u5ea62\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u7684\u9879\u76ee\u4e2d\uff1f\n\n\nYou can download this by npm and running \nnpm install ng2-restangular", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#5", 
            "text": "You can download this by npm and running  npm install ngx-restangular . This will install latest version of ngx-restangular (v.2.0.0).", 
            "title": "\u5982\u4f55\u5728\u89d2\u5ea65\u4e2d\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u7684\u9879\u76ee\u4e2d\uff1f"
        }, 
        {
            "location": "/faq/#4", 
            "text": "You can download this by npm and running  npm install --save ngx-restangular@1.0.13  Versions from 1.0.14 to 1.1.4 are deprecated. Npm warns you after their installation. Those versions would be removed.", 
            "title": "\u5982\u4f55\u4ee5\u89d2\u5ea64\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u7684\u9879\u76ee\u4e2d\uff1f"
        }, 
        {
            "location": "/faq/#2", 
            "text": "You can download this by npm and running  npm install ng2-restangular", 
            "title": "\u5982\u4f55\u4ee5\u89d2\u5ea62\u5c06\u5176\u6dfb\u52a0\u5230\u6211\u7684\u9879\u76ee\u4e2d\uff1f"
        }, 
        {
            "location": "/dependencies/", 
            "text": "\u4f9d\u8d56\n\n\nRestangular\u4f9d\u8d56Angular 2+\u548cLodash\u3002", 
            "title": "\u4f9d\u8d56"
        }, 
        {
            "location": "/dependencies/#_1", 
            "text": "Restangular\u4f9d\u8d56Angular 2+\u548cLodash\u3002", 
            "title": "\u4f9d\u8d56"
        }, 
        {
            "location": "/server-frameworks/", 
            "text": "\u670d\u52a1\u5668\u6846\u67b6\n\n\n\u7528\u6237\u62a5\u544a\u8bf4\u8fd9\u4e2a\u670d\u52a1\u5668\u6846\u67b6\u4e0eNgx-restangular\u4e00\u8d77\u73a9\u5f97\u5f88\u597d\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u8ba9\u4f60\u8f7b\u677e\u521b\u5efa\u4e00\u4e2a\u5d4c\u5957\u7684RESTful Resources API:\n\n\n\n\nRuby on Rails\n\n\nCakePHP, Laravel and FatFREE, Symfony2 with RestBundle, Silex for PHP\n\n\nPlay1 \n 2 for Java \n scala\n\n\nDropwizard for Java\n\n\nRestify and Express for NodeJS\n\n\nTastypie and Django Rest Framework for Django\n\n\nSlim Framework\n\n\nSymfony2 with FOSRestBundle (PHP)\n\n\nMicrosoft ASP.NET Web API 2\n\n\nGrails Framework", 
            "title": "\u670d\u52a1\u6846\u67b6"
        }, 
        {
            "location": "/server-frameworks/#_1", 
            "text": "\u7528\u6237\u62a5\u544a\u8bf4\u8fd9\u4e2a\u670d\u52a1\u5668\u6846\u67b6\u4e0eNgx-restangular\u4e00\u8d77\u73a9\u5f97\u5f88\u597d\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u8ba9\u4f60\u8f7b\u677e\u521b\u5efa\u4e00\u4e2a\u5d4c\u5957\u7684RESTful Resources API:   Ruby on Rails  CakePHP, Laravel and FatFREE, Symfony2 with RestBundle, Silex for PHP  Play1   2 for Java   scala  Dropwizard for Java  Restify and Express for NodeJS  Tastypie and Django Rest Framework for Django  Slim Framework  Symfony2 with FOSRestBundle (PHP)  Microsoft ASP.NET Web API 2  Grails Framework", 
            "title": "\u670d\u52a1\u5668\u6846\u67b6"
        }, 
        {
            "location": "/contributing/", 
            "text": "\u8d21\u732e\n\n\n\u8bf7\u9605\u8bfb\n\u6b64\u5904\u7684\u8d21\u732e\u6307\u5357\n.", 
            "title": "\u8d21\u732e"
        }, 
        {
            "location": "/contributing/#_1", 
            "text": "\u8bf7\u9605\u8bfb \u6b64\u5904\u7684\u8d21\u732e\u6307\u5357 .", 
            "title": "\u8d21\u732e"
        }, 
        {
            "location": "/license/", 
            "text": "\u8bc1\u4e66\n\n\n\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u8bb8\u53ef\u8bc1", 
            "title": "\u8bc1\u4e66"
        }, 
        {
            "location": "/license/#_1", 
            "text": "\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u8bb8\u53ef\u8bc1", 
            "title": "\u8bc1\u4e66"
        }
    ]
}